"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/plyr";
exports.ids = ["vendor-chunks/plyr"];
exports.modules = {

/***/ "(ssr)/./node_modules/plyr/dist/plyr.min.mjs":
/*!*********************************************!*\
  !*** ./node_modules/plyr/dist/plyr.min.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Plyr)\n/* harmony export */ });\nfunction _defineProperty$1(e, t, i) {\n    return (t = _toPropertyKey(t)) in e ? Object.defineProperty(e, t, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[t] = i, e;\n}\nfunction _toPrimitive(e, t) {\n    if (\"object\" != typeof e || null === e) return e;\n    var i = e[Symbol.toPrimitive];\n    if (void 0 !== i) {\n        var s = i.call(e, t || \"default\");\n        if (\"object\" != typeof s) return s;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === t ? String : Number)(e);\n}\nfunction _toPropertyKey(e) {\n    var t = _toPrimitive(e, \"string\");\n    return \"symbol\" == typeof t ? t : String(t);\n}\nfunction _classCallCheck(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, t) {\n    for(var i = 0; i < t.length; i++){\n        var s = t[i];\n        s.enumerable = s.enumerable || !1, s.configurable = !0, \"value\" in s && (s.writable = !0), Object.defineProperty(e, s.key, s);\n    }\n}\nfunction _createClass(e, t, i) {\n    return t && _defineProperties(e.prototype, t), i && _defineProperties(e, i), e;\n}\nfunction _defineProperty(e, t, i) {\n    return t in e ? Object.defineProperty(e, t, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[t] = i, e;\n}\nfunction ownKeys(e, t) {\n    var i = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var s = Object.getOwnPropertySymbols(e);\n        t && (s = s.filter(function(t) {\n            return Object.getOwnPropertyDescriptor(e, t).enumerable;\n        })), i.push.apply(i, s);\n    }\n    return i;\n}\nfunction _objectSpread2(e) {\n    for(var t = 1; t < arguments.length; t++){\n        var i = null != arguments[t] ? arguments[t] : {};\n        t % 2 ? ownKeys(Object(i), !0).forEach(function(t) {\n            _defineProperty(e, t, i[t]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : ownKeys(Object(i)).forEach(function(t) {\n            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t));\n        });\n    }\n    return e;\n}\nvar defaults$1 = {\n    addCSS: !0,\n    thumbWidth: 15,\n    watch: !0\n};\nfunction matches$1(e, t) {\n    return (function() {\n        return Array.from(document.querySelectorAll(t)).includes(this);\n    }).call(e, t);\n}\nfunction trigger(e, t) {\n    if (e && t) {\n        var i = new Event(t, {\n            bubbles: !0\n        });\n        e.dispatchEvent(i);\n    }\n}\nvar getConstructor$1 = function(e) {\n    return null != e ? e.constructor : null;\n}, instanceOf$1 = function(e, t) {\n    return !!(e && t && e instanceof t);\n}, isNullOrUndefined$1 = function(e) {\n    return null == e;\n}, isObject$1 = function(e) {\n    return getConstructor$1(e) === Object;\n}, isNumber$1 = function(e) {\n    return getConstructor$1(e) === Number && !Number.isNaN(e);\n}, isString$1 = function(e) {\n    return getConstructor$1(e) === String;\n}, isBoolean$1 = function(e) {\n    return getConstructor$1(e) === Boolean;\n}, isFunction$1 = function(e) {\n    return getConstructor$1(e) === Function;\n}, isArray$1 = function(e) {\n    return Array.isArray(e);\n}, isNodeList$1 = function(e) {\n    return instanceOf$1(e, NodeList);\n}, isElement$1 = function(e) {\n    return instanceOf$1(e, Element);\n}, isEvent$1 = function(e) {\n    return instanceOf$1(e, Event);\n}, isEmpty$1 = function(e) {\n    return isNullOrUndefined$1(e) || (isString$1(e) || isArray$1(e) || isNodeList$1(e)) && !e.length || isObject$1(e) && !Object.keys(e).length;\n}, is$1 = {\n    nullOrUndefined: isNullOrUndefined$1,\n    object: isObject$1,\n    number: isNumber$1,\n    string: isString$1,\n    boolean: isBoolean$1,\n    function: isFunction$1,\n    array: isArray$1,\n    nodeList: isNodeList$1,\n    element: isElement$1,\n    event: isEvent$1,\n    empty: isEmpty$1\n};\nfunction getDecimalPlaces(e) {\n    var t = \"\".concat(e).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0;\n}\nfunction round(e, t) {\n    if (1 > t) {\n        var i = getDecimalPlaces(t);\n        return parseFloat(e.toFixed(i));\n    }\n    return Math.round(e / t) * t;\n}\nvar RangeTouch = function() {\n    function e(t, i) {\n        _classCallCheck(this, e), is$1.element(t) ? this.element = t : is$1.string(t) && (this.element = document.querySelector(t)), is$1.element(this.element) && is$1.empty(this.element.rangeTouch) && (this.config = _objectSpread2({}, defaults$1, {}, i), this.init());\n    }\n    return _createClass(e, [\n        {\n            key: \"init\",\n            value: function() {\n                e.enabled && (this.config.addCSS && (this.element.style.userSelect = \"none\", this.element.style.webKitUserSelect = \"none\", this.element.style.touchAction = \"manipulation\"), this.listeners(!0), this.element.rangeTouch = this);\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                e.enabled && (this.config.addCSS && (this.element.style.userSelect = \"\", this.element.style.webKitUserSelect = \"\", this.element.style.touchAction = \"\"), this.listeners(!1), this.element.rangeTouch = null);\n            }\n        },\n        {\n            key: \"listeners\",\n            value: function(e) {\n                var t = this, i = e ? \"addEventListener\" : \"removeEventListener\";\n                [\n                    \"touchstart\",\n                    \"touchmove\",\n                    \"touchend\"\n                ].forEach(function(e) {\n                    t.element[i](e, function(e) {\n                        return t.set(e);\n                    }, !1);\n                });\n            }\n        },\n        {\n            key: \"get\",\n            value: function(t) {\n                if (!e.enabled || !is$1.event(t)) return null;\n                var i, s = t.target, n = t.changedTouches[0], r = parseFloat(s.getAttribute(\"min\")) || 0, a = parseFloat(s.getAttribute(\"max\")) || 100, o = parseFloat(s.getAttribute(\"step\")) || 1, l = s.getBoundingClientRect(), c = 100 / l.width * (this.config.thumbWidth / 2) / 100;\n                return 0 > (i = 100 / l.width * (n.clientX - l.left)) ? i = 0 : 100 < i && (i = 100), 50 > i ? i -= (100 - 2 * i) * c : 50 < i && (i += 2 * (i - 50) * c), r + round(i / 100 * (a - r), o);\n            }\n        },\n        {\n            key: \"set\",\n            value: function(t) {\n                e.enabled && is$1.event(t) && !t.target.disabled && (t.preventDefault(), t.target.value = this.get(t), trigger(t.target, \"touchend\" === t.type ? \"change\" : \"input\"));\n            }\n        }\n    ], [\n        {\n            key: \"setup\",\n            value: function(t) {\n                var i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}, s = null;\n                if (is$1.empty(t) || is$1.string(t) ? s = Array.from(document.querySelectorAll(is$1.string(t) ? t : 'input[type=\"range\"]')) : is$1.element(t) ? s = [\n                    t\n                ] : is$1.nodeList(t) ? s = Array.from(t) : is$1.array(t) && (s = t.filter(is$1.element)), is$1.empty(s)) return null;\n                var n = _objectSpread2({}, defaults$1, {}, i);\n                if (is$1.string(t) && n.watch) {\n                    var r = new MutationObserver(function(i) {\n                        Array.from(i).forEach(function(i) {\n                            Array.from(i.addedNodes).forEach(function(i) {\n                                is$1.element(i) && matches$1(i, t) && new e(i, n);\n                            });\n                        });\n                    });\n                    r.observe(document.body, {\n                        childList: !0,\n                        subtree: !0\n                    });\n                }\n                return s.map(function(t) {\n                    return new e(t, i);\n                });\n            }\n        },\n        {\n            key: \"enabled\",\n            get: function() {\n                return \"ontouchstart\" in document.documentElement;\n            }\n        }\n    ]), e;\n}();\nconst getConstructor = (e)=>null != e ? e.constructor : null, instanceOf = (e, t)=>Boolean(e && t && e instanceof t), isNullOrUndefined = (e)=>null == e, isObject = (e)=>getConstructor(e) === Object, isNumber = (e)=>getConstructor(e) === Number && !Number.isNaN(e), isString = (e)=>getConstructor(e) === String, isBoolean = (e)=>getConstructor(e) === Boolean, isFunction = (e)=>\"function\" == typeof e, isArray = (e)=>Array.isArray(e), isWeakMap = (e)=>instanceOf(e, WeakMap), isNodeList = (e)=>instanceOf(e, NodeList), isTextNode = (e)=>getConstructor(e) === Text, isEvent = (e)=>instanceOf(e, Event), isKeyboardEvent = (e)=>instanceOf(e, KeyboardEvent), isCue = (e)=>instanceOf(e, window.TextTrackCue) || instanceOf(e, window.VTTCue), isTrack = (e)=>instanceOf(e, TextTrack) || !isNullOrUndefined(e) && isString(e.kind), isPromise = (e)=>instanceOf(e, Promise) && isFunction(e.then), isElement = (e)=>null !== e && \"object\" == typeof e && 1 === e.nodeType && \"object\" == typeof e.style && \"object\" == typeof e.ownerDocument, isEmpty = (e)=>isNullOrUndefined(e) || (isString(e) || isArray(e) || isNodeList(e)) && !e.length || isObject(e) && !Object.keys(e).length, isUrl = (e)=>{\n    if (instanceOf(e, window.URL)) return !0;\n    if (!isString(e)) return !1;\n    let t = e;\n    e.startsWith(\"http://\") && e.startsWith(\"https://\") || (t = `http://${e}`);\n    try {\n        return !isEmpty(new URL(t).hostname);\n    } catch (e) {\n        return !1;\n    }\n};\nvar is = {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    weakMap: isWeakMap,\n    nodeList: isNodeList,\n    element: isElement,\n    textNode: isTextNode,\n    event: isEvent,\n    keyboardEvent: isKeyboardEvent,\n    cue: isCue,\n    track: isTrack,\n    promise: isPromise,\n    url: isUrl,\n    empty: isEmpty\n};\nconst transitionEndEvent = (()=>{\n    const e = document.createElement(\"span\"), t = {\n        WebkitTransition: \"webkitTransitionEnd\",\n        MozTransition: \"transitionend\",\n        OTransition: \"oTransitionEnd otransitionend\",\n        transition: \"transitionend\"\n    }, i = Object.keys(t).find((t)=>void 0 !== e.style[t]);\n    return !!is.string(i) && t[i];\n})();\nfunction repaint(e, t) {\n    setTimeout(()=>{\n        try {\n            e.hidden = !0, e.offsetHeight, e.hidden = !1;\n        } catch (e) {}\n    }, t);\n}\nconst isIE = Boolean(window.document.documentMode), isEdge = /Edge/g.test(navigator.userAgent), isWebKit = \"WebkitAppearance\" in document.documentElement.style && !/Edge/g.test(navigator.userAgent), isIPhone = /iPhone|iPod/gi.test(navigator.userAgent) && navigator.maxTouchPoints > 1, isIPadOS = \"MacIntel\" === navigator.platform && navigator.maxTouchPoints > 1, isIos = /iPad|iPhone|iPod/gi.test(navigator.userAgent) && navigator.maxTouchPoints > 1;\nvar browser = {\n    isIE: isIE,\n    isEdge: isEdge,\n    isWebKit: isWebKit,\n    isIPhone: isIPhone,\n    isIPadOS: isIPadOS,\n    isIos: isIos\n};\nfunction cloneDeep(e) {\n    return JSON.parse(JSON.stringify(e));\n}\nfunction getDeep(e, t) {\n    return t.split(\".\").reduce((e, t)=>e && e[t], e);\n}\nfunction extend(e = {}, ...t) {\n    if (!t.length) return e;\n    const i = t.shift();\n    return is.object(i) ? (Object.keys(i).forEach((t)=>{\n        is.object(i[t]) ? (Object.keys(e).includes(t) || Object.assign(e, {\n            [t]: {}\n        }), extend(e[t], i[t])) : Object.assign(e, {\n            [t]: i[t]\n        });\n    }), extend(e, ...t)) : e;\n}\nfunction wrap(e, t) {\n    const i = e.length ? e : [\n        e\n    ];\n    Array.from(i).reverse().forEach((e, i)=>{\n        const s = i > 0 ? t.cloneNode(!0) : t, n = e.parentNode, r = e.nextSibling;\n        s.appendChild(e), r ? n.insertBefore(s, r) : n.appendChild(s);\n    });\n}\nfunction setAttributes(e, t) {\n    is.element(e) && !is.empty(t) && Object.entries(t).filter(([, e])=>!is.nullOrUndefined(e)).forEach(([t, i])=>e.setAttribute(t, i));\n}\nfunction createElement(e, t, i) {\n    const s = document.createElement(e);\n    return is.object(t) && setAttributes(s, t), is.string(i) && (s.innerText = i), s;\n}\nfunction insertAfter(e, t) {\n    is.element(e) && is.element(t) && t.parentNode.insertBefore(e, t.nextSibling);\n}\nfunction insertElement(e, t, i, s) {\n    is.element(t) && t.appendChild(createElement(e, i, s));\n}\nfunction removeElement(e) {\n    is.nodeList(e) || is.array(e) ? Array.from(e).forEach(removeElement) : is.element(e) && is.element(e.parentNode) && e.parentNode.removeChild(e);\n}\nfunction emptyElement(e) {\n    if (!is.element(e)) return;\n    let { length: t } = e.childNodes;\n    for(; t > 0;)e.removeChild(e.lastChild), t -= 1;\n}\nfunction replaceElement(e, t) {\n    return is.element(t) && is.element(t.parentNode) && is.element(e) ? (t.parentNode.replaceChild(e, t), e) : null;\n}\nfunction getAttributesFromSelector(e, t) {\n    if (!is.string(e) || is.empty(e)) return {};\n    const i = {}, s = extend({}, t);\n    return e.split(\",\").forEach((e)=>{\n        const t = e.trim(), n = t.replace(\".\", \"\"), r = t.replace(/[[\\]]/g, \"\").split(\"=\"), [a] = r, o = r.length > 1 ? r[1].replace(/[\"']/g, \"\") : \"\";\n        switch(t.charAt(0)){\n            case \".\":\n                is.string(s.class) ? i.class = `${s.class} ${n}` : i.class = n;\n                break;\n            case \"#\":\n                i.id = t.replace(\"#\", \"\");\n                break;\n            case \"[\":\n                i[a] = o;\n        }\n    }), extend(s, i);\n}\nfunction toggleHidden(e, t) {\n    if (!is.element(e)) return;\n    let i = t;\n    is.boolean(i) || (i = !e.hidden), e.hidden = i;\n}\nfunction toggleClass(e, t, i) {\n    if (is.nodeList(e)) return Array.from(e).map((e)=>toggleClass(e, t, i));\n    if (is.element(e)) {\n        let s = \"toggle\";\n        return void 0 !== i && (s = i ? \"add\" : \"remove\"), e.classList[s](t), e.classList.contains(t);\n    }\n    return !1;\n}\nfunction hasClass(e, t) {\n    return is.element(e) && e.classList.contains(t);\n}\nfunction matches(e, t) {\n    const { prototype: i } = Element;\n    return (i.matches || i.webkitMatchesSelector || i.mozMatchesSelector || i.msMatchesSelector || function() {\n        return Array.from(document.querySelectorAll(t)).includes(this);\n    }).call(e, t);\n}\nfunction closest$1(e, t) {\n    const { prototype: i } = Element;\n    return (i.closest || function() {\n        let e = this;\n        do {\n            if (matches.matches(e, t)) return e;\n            e = e.parentElement || e.parentNode;\n        }while (null !== e && 1 === e.nodeType);\n        return null;\n    }).call(e, t);\n}\nfunction getElements(e) {\n    return this.elements.container.querySelectorAll(e);\n}\nfunction getElement(e) {\n    return this.elements.container.querySelector(e);\n}\nfunction setFocus(e = null, t = !1) {\n    is.element(e) && e.focus({\n        preventScroll: !0,\n        focusVisible: t\n    });\n}\nconst defaultCodecs = {\n    \"audio/ogg\": \"vorbis\",\n    \"audio/wav\": \"1\",\n    \"video/webm\": \"vp8, vorbis\",\n    \"video/mp4\": \"avc1.42E01E, mp4a.40.2\",\n    \"video/ogg\": \"theora\"\n}, support = {\n    audio: \"canPlayType\" in document.createElement(\"audio\"),\n    video: \"canPlayType\" in document.createElement(\"video\"),\n    check (e, t) {\n        const i = support[e] || \"html5\" !== t;\n        return {\n            api: i,\n            ui: i && support.rangeInput\n        };\n    },\n    pip: !(browser.isIPhone || !is.function(createElement(\"video\").webkitSetPresentationMode) && (!document.pictureInPictureEnabled || createElement(\"video\").disablePictureInPicture)),\n    airplay: is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n    playsinline: \"playsInline\" in document.createElement(\"video\"),\n    mime (e) {\n        if (is.empty(e)) return !1;\n        const [t] = e.split(\"/\");\n        let i = e;\n        if (!this.isHTML5 || t !== this.type) return !1;\n        Object.keys(defaultCodecs).includes(i) && (i += `; codecs=\"${defaultCodecs[e]}\"`);\n        try {\n            return Boolean(i && this.media.canPlayType(i).replace(/no/, \"\"));\n        } catch (e) {\n            return !1;\n        }\n    },\n    textTracks: \"textTracks\" in document.createElement(\"video\"),\n    rangeInput: (()=>{\n        const e = document.createElement(\"input\");\n        return e.type = \"range\", \"range\" === e.type;\n    })(),\n    touch: \"ontouchstart\" in document.documentElement,\n    transitions: !1 !== transitionEndEvent,\n    reducedMotion: \"matchMedia\" in window && window.matchMedia(\"(prefers-reduced-motion)\").matches\n}, supportsPassiveListeners = (()=>{\n    let e = !1;\n    try {\n        const t = Object.defineProperty({}, \"passive\", {\n            get: ()=>(e = !0, null)\n        });\n        window.addEventListener(\"test\", null, t), window.removeEventListener(\"test\", null, t);\n    } catch (e) {}\n    return e;\n})();\nfunction toggleListener(e, t, i, s = !1, n = !0, r = !1) {\n    if (!e || !(\"addEventListener\" in e) || is.empty(t) || !is.function(i)) return;\n    const a = t.split(\" \");\n    let o = r;\n    supportsPassiveListeners && (o = {\n        passive: n,\n        capture: r\n    }), a.forEach((t)=>{\n        this && this.eventListeners && s && this.eventListeners.push({\n            element: e,\n            type: t,\n            callback: i,\n            options: o\n        }), e[s ? \"addEventListener\" : \"removeEventListener\"](t, i, o);\n    });\n}\nfunction on(e, t = \"\", i, s = !0, n = !1) {\n    toggleListener.call(this, e, t, i, !0, s, n);\n}\nfunction off(e, t = \"\", i, s = !0, n = !1) {\n    toggleListener.call(this, e, t, i, !1, s, n);\n}\nfunction once(e, t = \"\", i, s = !0, n = !1) {\n    const r = (...a)=>{\n        off(e, t, r, s, n), i.apply(this, a);\n    };\n    toggleListener.call(this, e, t, r, !0, s, n);\n}\nfunction triggerEvent(e, t = \"\", i = !1, s = {}) {\n    if (!is.element(e) || is.empty(t)) return;\n    const n = new CustomEvent(t, {\n        bubbles: i,\n        detail: {\n            ...s,\n            plyr: this\n        }\n    });\n    e.dispatchEvent(n);\n}\nfunction unbindListeners() {\n    this && this.eventListeners && (this.eventListeners.forEach((e)=>{\n        const { element: t, type: i, callback: s, options: n } = e;\n        t.removeEventListener(i, s, n);\n    }), this.eventListeners = []);\n}\nfunction ready() {\n    return new Promise((e)=>this.ready ? setTimeout(e, 0) : on.call(this, this.elements.container, \"ready\", e)).then(()=>{});\n}\nfunction silencePromise(e) {\n    is.promise(e) && e.then(null, ()=>{});\n}\nfunction dedupe(e) {\n    return is.array(e) ? e.filter((t, i)=>e.indexOf(t) === i) : e;\n}\nfunction closest(e, t) {\n    return is.array(e) && e.length ? e.reduce((e, i)=>Math.abs(i - t) < Math.abs(e - t) ? i : e) : null;\n}\nfunction supportsCSS(e) {\n    return !(!window || !window.CSS) && window.CSS.supports(e);\n}\nconst standardRatios = [\n    [\n        1,\n        1\n    ],\n    [\n        4,\n        3\n    ],\n    [\n        3,\n        4\n    ],\n    [\n        5,\n        4\n    ],\n    [\n        4,\n        5\n    ],\n    [\n        3,\n        2\n    ],\n    [\n        2,\n        3\n    ],\n    [\n        16,\n        10\n    ],\n    [\n        10,\n        16\n    ],\n    [\n        16,\n        9\n    ],\n    [\n        9,\n        16\n    ],\n    [\n        21,\n        9\n    ],\n    [\n        9,\n        21\n    ],\n    [\n        32,\n        9\n    ],\n    [\n        9,\n        32\n    ]\n].reduce((e, [t, i])=>({\n        ...e,\n        [t / i]: [\n            t,\n            i\n        ]\n    }), {});\nfunction validateAspectRatio(e) {\n    if (!(is.array(e) || is.string(e) && e.includes(\":\"))) return !1;\n    return (is.array(e) ? e : e.split(\":\")).map(Number).every(is.number);\n}\nfunction reduceAspectRatio(e) {\n    if (!is.array(e) || !e.every(is.number)) return null;\n    const [t, i] = e, s = (e, t)=>0 === t ? e : s(t, e % t), n = s(t, i);\n    return [\n        t / n,\n        i / n\n    ];\n}\nfunction getAspectRatio(e) {\n    const t = (e)=>validateAspectRatio(e) ? e.split(\":\").map(Number) : null;\n    let i = t(e);\n    if (null === i && (i = t(this.config.ratio)), null === i && !is.empty(this.embed) && is.array(this.embed.ratio) && ({ ratio: i } = this.embed), null === i && this.isHTML5) {\n        const { videoWidth: e, videoHeight: t } = this.media;\n        i = [\n            e,\n            t\n        ];\n    }\n    return reduceAspectRatio(i);\n}\nfunction setAspectRatio(e) {\n    if (!this.isVideo) return {};\n    const { wrapper: t } = this.elements, i = getAspectRatio.call(this, e);\n    if (!is.array(i)) return {};\n    const [s, n] = reduceAspectRatio(i), r = 100 / s * n;\n    if (supportsCSS(`aspect-ratio: ${s}/${n}`) ? t.style.aspectRatio = `${s}/${n}` : t.style.paddingBottom = `${r}%`, this.isVimeo && !this.config.vimeo.premium && this.supported.ui) {\n        const e = 100 / this.media.offsetWidth * parseInt(window.getComputedStyle(this.media).paddingBottom, 10), i = (e - r) / (e / 50);\n        this.fullscreen.active ? t.style.paddingBottom = null : this.media.style.transform = `translateY(-${i}%)`;\n    } else this.isHTML5 && t.classList.add(this.config.classNames.videoFixedRatio);\n    return {\n        padding: r,\n        ratio: i\n    };\n}\nfunction roundAspectRatio(e, t, i = .05) {\n    const s = e / t, n = closest(Object.keys(standardRatios), s);\n    return Math.abs(n - s) <= i ? standardRatios[n] : [\n        e,\n        t\n    ];\n}\nfunction getViewportSize() {\n    return [\n        Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0),\n        Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n    ];\n}\nconst html5 = {\n    getSources () {\n        if (!this.isHTML5) return [];\n        return Array.from(this.media.querySelectorAll(\"source\")).filter((e)=>{\n            const t = e.getAttribute(\"type\");\n            return !!is.empty(t) || support.mime.call(this, t);\n        });\n    },\n    getQualityOptions () {\n        return this.config.quality.forced ? this.config.quality.options : html5.getSources.call(this).map((e)=>Number(e.getAttribute(\"size\"))).filter(Boolean);\n    },\n    setup () {\n        if (!this.isHTML5) return;\n        const e = this;\n        e.options.speed = e.config.speed.options, is.empty(this.config.ratio) || setAspectRatio.call(e), Object.defineProperty(e.media, \"quality\", {\n            get () {\n                const t = html5.getSources.call(e).find((t)=>t.getAttribute(\"src\") === e.source);\n                return t && Number(t.getAttribute(\"size\"));\n            },\n            set (t) {\n                if (e.quality !== t) {\n                    if (e.config.quality.forced && is.function(e.config.quality.onChange)) e.config.quality.onChange(t);\n                    else {\n                        const i = html5.getSources.call(e).find((e)=>Number(e.getAttribute(\"size\")) === t);\n                        if (!i) return;\n                        const { currentTime: s, paused: n, preload: r, readyState: a, playbackRate: o } = e.media;\n                        e.media.src = i.getAttribute(\"src\"), (\"none\" !== r || a) && (e.once(\"loadedmetadata\", ()=>{\n                            e.speed = o, e.currentTime = s, n || silencePromise(e.play());\n                        }), e.media.load());\n                    }\n                    triggerEvent.call(e, e.media, \"qualitychange\", !1, {\n                        quality: t\n                    });\n                }\n            }\n        });\n    },\n    cancelRequests () {\n        this.isHTML5 && (removeElement(html5.getSources.call(this)), this.media.setAttribute(\"src\", this.config.blankVideo), this.media.load(), this.debug.log(\"Cancelled network requests\"));\n    }\n};\nfunction generateId(e) {\n    return `${e}-${Math.floor(1e4 * Math.random())}`;\n}\nfunction format(e, ...t) {\n    return is.empty(e) ? e : e.toString().replace(/{(\\d+)}/g, (e, i)=>t[i].toString());\n}\nfunction getPercentage(e, t) {\n    return 0 === e || 0 === t || Number.isNaN(e) || Number.isNaN(t) ? 0 : (e / t * 100).toFixed(2);\n}\nconst replaceAll = (e = \"\", t = \"\", i = \"\")=>e.replace(new RegExp(t.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\"), \"g\"), i.toString()), toTitleCase = (e = \"\")=>e.toString().replace(/\\w\\S*/g, (e)=>e.charAt(0).toUpperCase() + e.slice(1).toLowerCase());\nfunction toPascalCase(e = \"\") {\n    let t = e.toString();\n    return t = replaceAll(t, \"-\", \" \"), t = replaceAll(t, \"_\", \" \"), t = toTitleCase(t), replaceAll(t, \" \", \"\");\n}\nfunction toCamelCase(e = \"\") {\n    let t = e.toString();\n    return t = toPascalCase(t), t.charAt(0).toLowerCase() + t.slice(1);\n}\nfunction stripHTML(e) {\n    const t = document.createDocumentFragment(), i = document.createElement(\"div\");\n    return t.appendChild(i), i.innerHTML = e, t.firstChild.innerText;\n}\nfunction getHTML(e) {\n    const t = document.createElement(\"div\");\n    return t.appendChild(e), t.innerHTML;\n}\nconst resources = {\n    pip: \"PIP\",\n    airplay: \"AirPlay\",\n    html5: \"HTML5\",\n    vimeo: \"Vimeo\",\n    youtube: \"YouTube\"\n}, i18n = {\n    get (e = \"\", t = {}) {\n        if (is.empty(e) || is.empty(t)) return \"\";\n        let i = getDeep(t.i18n, e);\n        if (is.empty(i)) return Object.keys(resources).includes(e) ? resources[e] : \"\";\n        const s = {\n            \"{seektime}\": t.seekTime,\n            \"{title}\": t.title\n        };\n        return Object.entries(s).forEach(([e, t])=>{\n            i = replaceAll(i, e, t);\n        }), i;\n    }\n};\nclass Storage {\n    constructor(e){\n        _defineProperty$1(this, \"get\", (e)=>{\n            if (!Storage.supported || !this.enabled) return null;\n            const t = window.localStorage.getItem(this.key);\n            if (is.empty(t)) return null;\n            const i = JSON.parse(t);\n            return is.string(e) && e.length ? i[e] : i;\n        }), _defineProperty$1(this, \"set\", (e)=>{\n            if (!Storage.supported || !this.enabled) return;\n            if (!is.object(e)) return;\n            let t = this.get();\n            is.empty(t) && (t = {}), extend(t, e);\n            try {\n                window.localStorage.setItem(this.key, JSON.stringify(t));\n            } catch (e) {}\n        }), this.enabled = e.config.storage.enabled, this.key = e.config.storage.key;\n    }\n    static get supported() {\n        try {\n            if (!(\"localStorage\" in window)) return !1;\n            const e = \"___test\";\n            return window.localStorage.setItem(e, e), window.localStorage.removeItem(e), !0;\n        } catch (e) {\n            return !1;\n        }\n    }\n}\nfunction fetch(e, t = \"text\") {\n    return new Promise((i, s)=>{\n        try {\n            const s = new XMLHttpRequest;\n            if (!(\"withCredentials\" in s)) return;\n            s.addEventListener(\"load\", ()=>{\n                if (\"text\" === t) try {\n                    i(JSON.parse(s.responseText));\n                } catch (e) {\n                    i(s.responseText);\n                }\n                else i(s.response);\n            }), s.addEventListener(\"error\", ()=>{\n                throw new Error(s.status);\n            }), s.open(\"GET\", e, !0), s.responseType = t, s.send();\n        } catch (e) {\n            s(e);\n        }\n    });\n}\nfunction loadSprite(e, t) {\n    if (!is.string(e)) return;\n    const i = \"cache\", s = is.string(t);\n    let n = !1;\n    const r = ()=>null !== document.getElementById(t), a = (e, t)=>{\n        e.innerHTML = t, s && r() || document.body.insertAdjacentElement(\"afterbegin\", e);\n    };\n    if (!s || !r()) {\n        const r = Storage.supported, o = document.createElement(\"div\");\n        if (o.setAttribute(\"hidden\", \"\"), s && o.setAttribute(\"id\", t), r) {\n            const e = window.localStorage.getItem(`${i}-${t}`);\n            if (n = null !== e, n) {\n                const t = JSON.parse(e);\n                a(o, t.content);\n            }\n        }\n        fetch(e).then((e)=>{\n            if (!is.empty(e)) {\n                if (r) try {\n                    window.localStorage.setItem(`${i}-${t}`, JSON.stringify({\n                        content: e\n                    }));\n                } catch (e) {}\n                a(o, e);\n            }\n        }).catch(()=>{});\n    }\n}\nconst getHours = (e)=>Math.trunc(e / 60 / 60 % 60, 10), getMinutes = (e)=>Math.trunc(e / 60 % 60, 10), getSeconds = (e)=>Math.trunc(e % 60, 10);\nfunction formatTime(e = 0, t = !1, i = !1) {\n    if (!is.number(e)) return formatTime(void 0, t, i);\n    const s = (e)=>`0${e}`.slice(-2);\n    let n = getHours(e);\n    const r = getMinutes(e), a = getSeconds(e);\n    return n = t || n > 0 ? `${n}:` : \"\", `${i && e > 0 ? \"-\" : \"\"}${n}${s(r)}:${s(a)}`;\n}\nconst controls = {\n    getIconUrl () {\n        const e = new URL(this.config.iconUrl, window.location), t = window.location.host ? window.location.host : window.top.location.host, i = e.host !== t || browser.isIE && !window.svg4everybody;\n        return {\n            url: this.config.iconUrl,\n            cors: i\n        };\n    },\n    findElements () {\n        try {\n            return this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper), this.elements.buttons = {\n                play: getElements.call(this, this.config.selectors.buttons.play),\n                pause: getElement.call(this, this.config.selectors.buttons.pause),\n                restart: getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: getElement.call(this, this.config.selectors.buttons.mute),\n                pip: getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: getElement.call(this, this.config.selectors.buttons.settings),\n                captions: getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen)\n            }, this.elements.progress = getElement.call(this, this.config.selectors.progress), this.elements.inputs = {\n                seek: getElement.call(this, this.config.selectors.inputs.seek),\n                volume: getElement.call(this, this.config.selectors.inputs.volume)\n            }, this.elements.display = {\n                buffer: getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: getElement.call(this, this.config.selectors.display.currentTime),\n                duration: getElement.call(this, this.config.selectors.display.duration)\n            }, is.element(this.elements.progress) && (this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`)), !0;\n        } catch (e) {\n            return this.debug.warn(\"It looks like there is a problem with your custom controls HTML\", e), this.toggleNativeControls(!0), !1;\n        }\n    },\n    createIcon (e, t) {\n        const i = \"http://www.w3.org/2000/svg\", s = controls.getIconUrl.call(this), n = `${s.cors ? \"\" : s.url}#${this.config.iconPrefix}`, r = document.createElementNS(i, \"svg\");\n        setAttributes(r, extend(t, {\n            \"aria-hidden\": \"true\",\n            focusable: \"false\"\n        }));\n        const a = document.createElementNS(i, \"use\"), o = `${n}-${e}`;\n        return \"href\" in a && a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", o), a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", o), r.appendChild(a), r;\n    },\n    createLabel (e, t = {}) {\n        const i = i18n.get(e, this.config);\n        return createElement(\"span\", {\n            ...t,\n            class: [\n                t.class,\n                this.config.classNames.hidden\n            ].filter(Boolean).join(\" \")\n        }, i);\n    },\n    createBadge (e) {\n        if (is.empty(e)) return null;\n        const t = createElement(\"span\", {\n            class: this.config.classNames.menu.value\n        });\n        return t.appendChild(createElement(\"span\", {\n            class: this.config.classNames.menu.badge\n        }, e)), t;\n    },\n    createButton (e, t) {\n        const i = extend({}, t);\n        let s = toCamelCase(e);\n        const n = {\n            element: \"button\",\n            toggle: !1,\n            label: null,\n            icon: null,\n            labelPressed: null,\n            iconPressed: null\n        };\n        switch([\n            \"element\",\n            \"icon\",\n            \"label\"\n        ].forEach((e)=>{\n            Object.keys(i).includes(e) && (n[e] = i[e], delete i[e]);\n        }), \"button\" !== n.element || Object.keys(i).includes(\"type\") || (i.type = \"button\"), Object.keys(i).includes(\"class\") ? i.class.split(\" \").some((e)=>e === this.config.classNames.control) || extend(i, {\n            class: `${i.class} ${this.config.classNames.control}`\n        }) : i.class = this.config.classNames.control, e){\n            case \"play\":\n                n.toggle = !0, n.label = \"play\", n.labelPressed = \"pause\", n.icon = \"play\", n.iconPressed = \"pause\";\n                break;\n            case \"mute\":\n                n.toggle = !0, n.label = \"mute\", n.labelPressed = \"unmute\", n.icon = \"volume\", n.iconPressed = \"muted\";\n                break;\n            case \"captions\":\n                n.toggle = !0, n.label = \"enableCaptions\", n.labelPressed = \"disableCaptions\", n.icon = \"captions-off\", n.iconPressed = \"captions-on\";\n                break;\n            case \"fullscreen\":\n                n.toggle = !0, n.label = \"enterFullscreen\", n.labelPressed = \"exitFullscreen\", n.icon = \"enter-fullscreen\", n.iconPressed = \"exit-fullscreen\";\n                break;\n            case \"play-large\":\n                i.class += ` ${this.config.classNames.control}--overlaid`, s = \"play\", n.label = \"play\", n.icon = \"play\";\n                break;\n            default:\n                is.empty(n.label) && (n.label = s), is.empty(n.icon) && (n.icon = e);\n        }\n        const r = createElement(n.element);\n        return n.toggle ? (r.appendChild(controls.createIcon.call(this, n.iconPressed, {\n            class: \"icon--pressed\"\n        })), r.appendChild(controls.createIcon.call(this, n.icon, {\n            class: \"icon--not-pressed\"\n        })), r.appendChild(controls.createLabel.call(this, n.labelPressed, {\n            class: \"label--pressed\"\n        })), r.appendChild(controls.createLabel.call(this, n.label, {\n            class: \"label--not-pressed\"\n        }))) : (r.appendChild(controls.createIcon.call(this, n.icon)), r.appendChild(controls.createLabel.call(this, n.label))), extend(i, getAttributesFromSelector(this.config.selectors.buttons[s], i)), setAttributes(r, i), \"play\" === s ? (is.array(this.elements.buttons[s]) || (this.elements.buttons[s] = []), this.elements.buttons[s].push(r)) : this.elements.buttons[s] = r, r;\n    },\n    createRange (e, t) {\n        const i = createElement(\"input\", extend(getAttributesFromSelector(this.config.selectors.inputs[e]), {\n            type: \"range\",\n            min: 0,\n            max: 100,\n            step: .01,\n            value: 0,\n            autocomplete: \"off\",\n            role: \"slider\",\n            \"aria-label\": i18n.get(e, this.config),\n            \"aria-valuemin\": 0,\n            \"aria-valuemax\": 100,\n            \"aria-valuenow\": 0\n        }, t));\n        return this.elements.inputs[e] = i, controls.updateRangeFill.call(this, i), RangeTouch.setup(i), i;\n    },\n    createProgress (e, t) {\n        const i = createElement(\"progress\", extend(getAttributesFromSelector(this.config.selectors.display[e]), {\n            min: 0,\n            max: 100,\n            value: 0,\n            role: \"progressbar\",\n            \"aria-hidden\": !0\n        }, t));\n        if (\"volume\" !== e) {\n            i.appendChild(createElement(\"span\", null, \"0\"));\n            const t = {\n                played: \"played\",\n                buffer: \"buffered\"\n            }[e], s = t ? i18n.get(t, this.config) : \"\";\n            i.innerText = `% ${s.toLowerCase()}`;\n        }\n        return this.elements.display[e] = i, i;\n    },\n    createTime (e, t) {\n        const i = getAttributesFromSelector(this.config.selectors.display[e], t), s = createElement(\"div\", extend(i, {\n            class: `${i.class ? i.class : \"\"} ${this.config.classNames.display.time} `.trim(),\n            \"aria-label\": i18n.get(e, this.config),\n            role: \"timer\"\n        }), \"00:00\");\n        return this.elements.display[e] = s, s;\n    },\n    bindMenuItemShortcuts (e, t) {\n        on.call(this, e, \"keydown keyup\", (i)=>{\n            if (![\n                \" \",\n                \"ArrowUp\",\n                \"ArrowDown\",\n                \"ArrowRight\"\n            ].includes(i.key)) return;\n            if (i.preventDefault(), i.stopPropagation(), \"keydown\" === i.type) return;\n            const s = matches(e, '[role=\"menuitemradio\"]');\n            if (!s && [\n                \" \",\n                \"ArrowRight\"\n            ].includes(i.key)) controls.showMenuPanel.call(this, t, !0);\n            else {\n                let t;\n                \" \" !== i.key && (\"ArrowDown\" === i.key || s && \"ArrowRight\" === i.key ? (t = e.nextElementSibling, is.element(t) || (t = e.parentNode.firstElementChild)) : (t = e.previousElementSibling, is.element(t) || (t = e.parentNode.lastElementChild)), setFocus.call(this, t, !0));\n            }\n        }, !1), on.call(this, e, \"keyup\", (e)=>{\n            \"Return\" === e.key && controls.focusFirstMenuItem.call(this, null, !0);\n        });\n    },\n    createMenuItem ({ value: e, list: t, type: i, title: s, badge: n = null, checked: r = !1 }) {\n        const a = getAttributesFromSelector(this.config.selectors.inputs[i]), o = createElement(\"button\", extend(a, {\n            type: \"button\",\n            role: \"menuitemradio\",\n            class: `${this.config.classNames.control} ${a.class ? a.class : \"\"}`.trim(),\n            \"aria-checked\": r,\n            value: e\n        })), l = createElement(\"span\");\n        l.innerHTML = s, is.element(n) && l.appendChild(n), o.appendChild(l), Object.defineProperty(o, \"checked\", {\n            enumerable: !0,\n            get: ()=>\"true\" === o.getAttribute(\"aria-checked\"),\n            set (e) {\n                e && Array.from(o.parentNode.children).filter((e)=>matches(e, '[role=\"menuitemradio\"]')).forEach((e)=>e.setAttribute(\"aria-checked\", \"false\")), o.setAttribute(\"aria-checked\", e ? \"true\" : \"false\");\n            }\n        }), this.listeners.bind(o, \"click keyup\", (t)=>{\n            if (!is.keyboardEvent(t) || \" \" === t.key) {\n                switch(t.preventDefault(), t.stopPropagation(), o.checked = !0, i){\n                    case \"language\":\n                        this.currentTrack = Number(e);\n                        break;\n                    case \"quality\":\n                        this.quality = e;\n                        break;\n                    case \"speed\":\n                        this.speed = parseFloat(e);\n                }\n                controls.showMenuPanel.call(this, \"home\", is.keyboardEvent(t));\n            }\n        }, i, !1), controls.bindMenuItemShortcuts.call(this, o, i), t.appendChild(o);\n    },\n    formatTime (e = 0, t = !1) {\n        if (!is.number(e)) return e;\n        return formatTime(e, getHours(this.duration) > 0, t);\n    },\n    updateTimeDisplay (e = null, t = 0, i = !1) {\n        is.element(e) && is.number(t) && (e.innerText = controls.formatTime(t, i));\n    },\n    updateVolume () {\n        this.supported.ui && (is.element(this.elements.inputs.volume) && controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume), is.element(this.elements.buttons.mute) && (this.elements.buttons.mute.pressed = this.muted || 0 === this.volume));\n    },\n    setRange (e, t = 0) {\n        is.element(e) && (e.value = t, controls.updateRangeFill.call(this, e));\n    },\n    updateProgress (e) {\n        if (!this.supported.ui || !is.event(e)) return;\n        let t = 0;\n        const i = (e, t)=>{\n            const i = is.number(t) ? t : 0, s = is.element(e) ? e : this.elements.display.buffer;\n            if (is.element(s)) {\n                s.value = i;\n                const e = s.getElementsByTagName(\"span\")[0];\n                is.element(e) && (e.childNodes[0].nodeValue = i);\n            }\n        };\n        if (e) switch(e.type){\n            case \"timeupdate\":\n            case \"seeking\":\n            case \"seeked\":\n                t = getPercentage(this.currentTime, this.duration), \"timeupdate\" === e.type && controls.setRange.call(this, this.elements.inputs.seek, t);\n                break;\n            case \"playing\":\n            case \"progress\":\n                i(this.elements.display.buffer, 100 * this.buffered);\n        }\n    },\n    updateRangeFill (e) {\n        const t = is.event(e) ? e.target : e;\n        if (is.element(t) && \"range\" === t.getAttribute(\"type\")) {\n            if (matches(t, this.config.selectors.inputs.seek)) {\n                t.setAttribute(\"aria-valuenow\", this.currentTime);\n                const e = controls.formatTime(this.currentTime), i = controls.formatTime(this.duration), s = i18n.get(\"seekLabel\", this.config);\n                t.setAttribute(\"aria-valuetext\", s.replace(\"{currentTime}\", e).replace(\"{duration}\", i));\n            } else if (matches(t, this.config.selectors.inputs.volume)) {\n                const e = 100 * t.value;\n                t.setAttribute(\"aria-valuenow\", e), t.setAttribute(\"aria-valuetext\", `${e.toFixed(1)}%`);\n            } else t.setAttribute(\"aria-valuenow\", t.value);\n            (browser.isWebKit || browser.isIPadOS) && t.style.setProperty(\"--value\", t.value / t.max * 100 + \"%\");\n        }\n    },\n    updateSeekTooltip (e) {\n        var t, i;\n        if (!this.config.tooltips.seek || !is.element(this.elements.inputs.seek) || !is.element(this.elements.display.seekTooltip) || 0 === this.duration) return;\n        const s = this.elements.display.seekTooltip, n = `${this.config.classNames.tooltip}--visible`, r = (e)=>toggleClass(s, n, e);\n        if (this.touch) return void r(!1);\n        let a = 0;\n        const o = this.elements.progress.getBoundingClientRect();\n        if (is.event(e)) a = 100 / o.width * (e.pageX - o.left);\n        else {\n            if (!hasClass(s, n)) return;\n            a = parseFloat(s.style.left, 10);\n        }\n        a < 0 ? a = 0 : a > 100 && (a = 100);\n        const l = this.duration / 100 * a;\n        s.innerText = controls.formatTime(l);\n        const c = null === (t = this.config.markers) || void 0 === t || null === (i = t.points) || void 0 === i ? void 0 : i.find(({ time: e })=>e === Math.round(l));\n        c && s.insertAdjacentHTML(\"afterbegin\", `${c.label}<br>`), s.style.left = `${a}%`, is.event(e) && [\n            \"mouseenter\",\n            \"mouseleave\"\n        ].includes(e.type) && r(\"mouseenter\" === e.type);\n    },\n    timeUpdate (e) {\n        const t = !is.element(this.elements.display.duration) && this.config.invertTime;\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, t ? this.duration - this.currentTime : this.currentTime, t), e && \"timeupdate\" === e.type && this.media.seeking || controls.updateProgress.call(this, e);\n    },\n    durationUpdate () {\n        if (!this.supported.ui || !this.config.invertTime && this.currentTime) return;\n        if (this.duration >= 2 ** 32) return toggleHidden(this.elements.display.currentTime, !0), void toggleHidden(this.elements.progress, !0);\n        is.element(this.elements.inputs.seek) && this.elements.inputs.seek.setAttribute(\"aria-valuemax\", this.duration);\n        const e = is.element(this.elements.display.duration);\n        !e && this.config.displayDuration && this.paused && controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration), e && controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration), this.config.markers.enabled && controls.setMarkers.call(this), controls.updateSeekTooltip.call(this);\n    },\n    toggleMenuButton (e, t) {\n        toggleHidden(this.elements.settings.buttons[e], !t);\n    },\n    updateSetting (e, t, i) {\n        const s = this.elements.settings.panels[e];\n        let n = null, r = t;\n        if (\"captions\" === e) n = this.currentTrack;\n        else {\n            if (n = is.empty(i) ? this[e] : i, is.empty(n) && (n = this.config[e].default), !is.empty(this.options[e]) && !this.options[e].includes(n)) return void this.debug.warn(`Unsupported value of '${n}' for ${e}`);\n            if (!this.config[e].options.includes(n)) return void this.debug.warn(`Disabled value of '${n}' for ${e}`);\n        }\n        if (is.element(r) || (r = s && s.querySelector('[role=\"menu\"]')), !is.element(r)) return;\n        this.elements.settings.buttons[e].querySelector(`.${this.config.classNames.menu.value}`).innerHTML = controls.getLabel.call(this, e, n);\n        const a = r && r.querySelector(`[value=\"${n}\"]`);\n        is.element(a) && (a.checked = !0);\n    },\n    getLabel (e, t) {\n        switch(e){\n            case \"speed\":\n                return 1 === t ? i18n.get(\"normal\", this.config) : `${t}&times;`;\n            case \"quality\":\n                if (is.number(t)) {\n                    const e = i18n.get(`qualityLabel.${t}`, this.config);\n                    return e.length ? e : `${t}p`;\n                }\n                return toTitleCase(t);\n            case \"captions\":\n                return captions.getLabel.call(this);\n            default:\n                return null;\n        }\n    },\n    setQualityMenu (e) {\n        if (!is.element(this.elements.settings.panels.quality)) return;\n        const t = \"quality\", i = this.elements.settings.panels.quality.querySelector('[role=\"menu\"]');\n        is.array(e) && (this.options.quality = dedupe(e).filter((e)=>this.config.quality.options.includes(e)));\n        const s = !is.empty(this.options.quality) && this.options.quality.length > 1;\n        if (controls.toggleMenuButton.call(this, t, s), emptyElement(i), controls.checkMenu.call(this), !s) return;\n        const n = (e)=>{\n            const t = i18n.get(`qualityBadge.${e}`, this.config);\n            return t.length ? controls.createBadge.call(this, t) : null;\n        };\n        this.options.quality.sort((e, t)=>{\n            const i = this.config.quality.options;\n            return i.indexOf(e) > i.indexOf(t) ? 1 : -1;\n        }).forEach((e)=>{\n            controls.createMenuItem.call(this, {\n                value: e,\n                list: i,\n                type: t,\n                title: controls.getLabel.call(this, \"quality\", e),\n                badge: n(e)\n            });\n        }), controls.updateSetting.call(this, t, i);\n    },\n    setCaptionsMenu () {\n        if (!is.element(this.elements.settings.panels.captions)) return;\n        const e = \"captions\", t = this.elements.settings.panels.captions.querySelector('[role=\"menu\"]'), i = captions.getTracks.call(this), s = Boolean(i.length);\n        if (controls.toggleMenuButton.call(this, e, s), emptyElement(t), controls.checkMenu.call(this), !s) return;\n        const n = i.map((e, i)=>({\n                value: i,\n                checked: this.captions.toggled && this.currentTrack === i,\n                title: captions.getLabel.call(this, e),\n                badge: e.language && controls.createBadge.call(this, e.language.toUpperCase()),\n                list: t,\n                type: \"language\"\n            }));\n        n.unshift({\n            value: -1,\n            checked: !this.captions.toggled,\n            title: i18n.get(\"disabled\", this.config),\n            list: t,\n            type: \"language\"\n        }), n.forEach(controls.createMenuItem.bind(this)), controls.updateSetting.call(this, e, t);\n    },\n    setSpeedMenu () {\n        if (!is.element(this.elements.settings.panels.speed)) return;\n        const e = \"speed\", t = this.elements.settings.panels.speed.querySelector('[role=\"menu\"]');\n        this.options.speed = this.options.speed.filter((e)=>e >= this.minimumSpeed && e <= this.maximumSpeed);\n        const i = !is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleMenuButton.call(this, e, i), emptyElement(t), controls.checkMenu.call(this), i && (this.options.speed.forEach((i)=>{\n            controls.createMenuItem.call(this, {\n                value: i,\n                list: t,\n                type: e,\n                title: controls.getLabel.call(this, \"speed\", i)\n            });\n        }), controls.updateSetting.call(this, e, t));\n    },\n    checkMenu () {\n        const { buttons: e } = this.elements.settings, t = !is.empty(e) && Object.values(e).some((e)=>!e.hidden);\n        toggleHidden(this.elements.settings.menu, !t);\n    },\n    focusFirstMenuItem (e, t = !1) {\n        if (this.elements.settings.popup.hidden) return;\n        let i = e;\n        is.element(i) || (i = Object.values(this.elements.settings.panels).find((e)=>!e.hidden));\n        const s = i.querySelector('[role^=\"menuitem\"]');\n        setFocus.call(this, s, t);\n    },\n    toggleMenu (e) {\n        const { popup: t } = this.elements.settings, i = this.elements.buttons.settings;\n        if (!is.element(t) || !is.element(i)) return;\n        const { hidden: s } = t;\n        let n = s;\n        if (is.boolean(e)) n = e;\n        else if (is.keyboardEvent(e) && \"Escape\" === e.key) n = !1;\n        else if (is.event(e)) {\n            const s = is.function(e.composedPath) ? e.composedPath()[0] : e.target, r = t.contains(s);\n            if (r || !r && e.target !== i && n) return;\n        }\n        i.setAttribute(\"aria-expanded\", n), toggleHidden(t, !n), toggleClass(this.elements.container, this.config.classNames.menu.open, n), n && is.keyboardEvent(e) ? controls.focusFirstMenuItem.call(this, null, !0) : n || s || setFocus.call(this, i, is.keyboardEvent(e));\n    },\n    getMenuSize (e) {\n        const t = e.cloneNode(!0);\n        t.style.position = \"absolute\", t.style.opacity = 0, t.removeAttribute(\"hidden\"), e.parentNode.appendChild(t);\n        const i = t.scrollWidth, s = t.scrollHeight;\n        return removeElement(t), {\n            width: i,\n            height: s\n        };\n    },\n    showMenuPanel (e = \"\", t = !1) {\n        const i = this.elements.container.querySelector(`#plyr-settings-${this.id}-${e}`);\n        if (!is.element(i)) return;\n        const s = i.parentNode, n = Array.from(s.children).find((e)=>!e.hidden);\n        if (support.transitions && !support.reducedMotion) {\n            s.style.width = `${n.scrollWidth}px`, s.style.height = `${n.scrollHeight}px`;\n            const e = controls.getMenuSize.call(this, i), t = (e)=>{\n                e.target === s && [\n                    \"width\",\n                    \"height\"\n                ].includes(e.propertyName) && (s.style.width = \"\", s.style.height = \"\", off.call(this, s, transitionEndEvent, t));\n            };\n            on.call(this, s, transitionEndEvent, t), s.style.width = `${e.width}px`, s.style.height = `${e.height}px`;\n        }\n        toggleHidden(n, !0), toggleHidden(i, !1), controls.focusFirstMenuItem.call(this, i, t);\n    },\n    setDownloadUrl () {\n        const e = this.elements.buttons.download;\n        is.element(e) && e.setAttribute(\"href\", this.download);\n    },\n    create (e) {\n        const { bindMenuItemShortcuts: t, createButton: i, createProgress: s, createRange: n, createTime: r, setQualityMenu: a, setSpeedMenu: o, showMenuPanel: l } = controls;\n        this.elements.controls = null, is.array(this.config.controls) && this.config.controls.includes(\"play-large\") && this.elements.container.appendChild(i.call(this, \"play-large\"));\n        const c = createElement(\"div\", getAttributesFromSelector(this.config.selectors.controls.wrapper));\n        this.elements.controls = c;\n        const u = {\n            class: \"plyr__controls__item\"\n        };\n        return dedupe(is.array(this.config.controls) ? this.config.controls : []).forEach((a)=>{\n            if (\"restart\" === a && c.appendChild(i.call(this, \"restart\", u)), \"rewind\" === a && c.appendChild(i.call(this, \"rewind\", u)), \"play\" === a && c.appendChild(i.call(this, \"play\", u)), \"fast-forward\" === a && c.appendChild(i.call(this, \"fast-forward\", u)), \"progress\" === a) {\n                const t = createElement(\"div\", {\n                    class: `${u.class} plyr__progress__container`\n                }), i = createElement(\"div\", getAttributesFromSelector(this.config.selectors.progress));\n                if (i.appendChild(n.call(this, \"seek\", {\n                    id: `plyr-seek-${e.id}`\n                })), i.appendChild(s.call(this, \"buffer\")), this.config.tooltips.seek) {\n                    const e = createElement(\"span\", {\n                        class: this.config.classNames.tooltip\n                    }, \"00:00\");\n                    i.appendChild(e), this.elements.display.seekTooltip = e;\n                }\n                this.elements.progress = i, t.appendChild(this.elements.progress), c.appendChild(t);\n            }\n            if (\"current-time\" === a && c.appendChild(r.call(this, \"currentTime\", u)), \"duration\" === a && c.appendChild(r.call(this, \"duration\", u)), \"mute\" === a || \"volume\" === a) {\n                let { volume: t } = this.elements;\n                if (is.element(t) && c.contains(t) || (t = createElement(\"div\", extend({}, u, {\n                    class: `${u.class} plyr__volume`.trim()\n                })), this.elements.volume = t, c.appendChild(t)), \"mute\" === a && t.appendChild(i.call(this, \"mute\")), \"volume\" === a && !browser.isIos && !browser.isIPadOS) {\n                    const i = {\n                        max: 1,\n                        step: .05,\n                        value: this.config.volume\n                    };\n                    t.appendChild(n.call(this, \"volume\", extend(i, {\n                        id: `plyr-volume-${e.id}`\n                    })));\n                }\n            }\n            if (\"captions\" === a && c.appendChild(i.call(this, \"captions\", u)), \"settings\" === a && !is.empty(this.config.settings)) {\n                const s = createElement(\"div\", extend({}, u, {\n                    class: `${u.class} plyr__menu`.trim(),\n                    hidden: \"\"\n                }));\n                s.appendChild(i.call(this, \"settings\", {\n                    \"aria-haspopup\": !0,\n                    \"aria-controls\": `plyr-settings-${e.id}`,\n                    \"aria-expanded\": !1\n                }));\n                const n = createElement(\"div\", {\n                    class: \"plyr__menu__container\",\n                    id: `plyr-settings-${e.id}`,\n                    hidden: \"\"\n                }), r = createElement(\"div\"), a = createElement(\"div\", {\n                    id: `plyr-settings-${e.id}-home`\n                }), o = createElement(\"div\", {\n                    role: \"menu\"\n                });\n                a.appendChild(o), r.appendChild(a), this.elements.settings.panels.home = a, this.config.settings.forEach((i)=>{\n                    const s = createElement(\"button\", extend(getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: \"button\",\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        role: \"menuitem\",\n                        \"aria-haspopup\": !0,\n                        hidden: \"\"\n                    }));\n                    t.call(this, s, i), on.call(this, s, \"click\", ()=>{\n                        l.call(this, i, !1);\n                    });\n                    const n = createElement(\"span\", null, i18n.get(i, this.config)), a = createElement(\"span\", {\n                        class: this.config.classNames.menu.value\n                    });\n                    a.innerHTML = e[i], n.appendChild(a), s.appendChild(n), o.appendChild(s);\n                    const c = createElement(\"div\", {\n                        id: `plyr-settings-${e.id}-${i}`,\n                        hidden: \"\"\n                    }), u = createElement(\"button\", {\n                        type: \"button\",\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`\n                    });\n                    u.appendChild(createElement(\"span\", {\n                        \"aria-hidden\": !0\n                    }, i18n.get(i, this.config))), u.appendChild(createElement(\"span\", {\n                        class: this.config.classNames.hidden\n                    }, i18n.get(\"menuBack\", this.config))), on.call(this, c, \"keydown\", (e)=>{\n                        \"ArrowLeft\" === e.key && (e.preventDefault(), e.stopPropagation(), l.call(this, \"home\", !0));\n                    }, !1), on.call(this, u, \"click\", ()=>{\n                        l.call(this, \"home\", !1);\n                    }), c.appendChild(u), c.appendChild(createElement(\"div\", {\n                        role: \"menu\"\n                    })), r.appendChild(c), this.elements.settings.buttons[i] = s, this.elements.settings.panels[i] = c;\n                }), n.appendChild(r), s.appendChild(n), c.appendChild(s), this.elements.settings.popup = n, this.elements.settings.menu = s;\n            }\n            if (\"pip\" === a && support.pip && c.appendChild(i.call(this, \"pip\", u)), \"airplay\" === a && support.airplay && c.appendChild(i.call(this, \"airplay\", u)), \"download\" === a) {\n                const e = extend({}, u, {\n                    element: \"a\",\n                    href: this.download,\n                    target: \"_blank\"\n                });\n                this.isHTML5 && (e.download = \"\");\n                const { download: t } = this.config.urls;\n                !is.url(t) && this.isEmbed && extend(e, {\n                    icon: `logo-${this.provider}`,\n                    label: this.provider\n                }), c.appendChild(i.call(this, \"download\", e));\n            }\n            \"fullscreen\" === a && c.appendChild(i.call(this, \"fullscreen\", u));\n        }), this.isHTML5 && a.call(this, html5.getQualityOptions.call(this)), o.call(this), c;\n    },\n    inject () {\n        if (this.config.loadSprite) {\n            const e = controls.getIconUrl.call(this);\n            e.cors && loadSprite(e.url, \"sprite-plyr\");\n        }\n        this.id = Math.floor(1e4 * Math.random());\n        let e = null;\n        this.elements.controls = null;\n        const t = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title\n        };\n        let i = !0;\n        is.function(this.config.controls) && (this.config.controls = this.config.controls.call(this, t)), this.config.controls || (this.config.controls = []), is.element(this.config.controls) || is.string(this.config.controls) ? e = this.config.controls : (e = controls.create.call(this, {\n            id: this.id,\n            seektime: this.config.seekTime,\n            speed: this.speed,\n            quality: this.quality,\n            captions: captions.getLabel.call(this)\n        }), i = !1);\n        let s;\n        i && is.string(this.config.controls) && (e = ((e)=>{\n            let i = e;\n            return Object.entries(t).forEach(([e, t])=>{\n                i = replaceAll(i, `{${e}}`, t);\n            }), i;\n        })(e)), is.string(this.config.selectors.controls.container) && (s = document.querySelector(this.config.selectors.controls.container)), is.element(s) || (s = this.elements.container);\n        if (s[is.element(e) ? \"insertAdjacentElement\" : \"insertAdjacentHTML\"](\"afterbegin\", e), is.element(this.elements.controls) || controls.findElements.call(this), !is.empty(this.elements.buttons)) {\n            const e = (e)=>{\n                const t = this.config.classNames.controlPressed;\n                e.setAttribute(\"aria-pressed\", \"false\"), Object.defineProperty(e, \"pressed\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    get: ()=>hasClass(e, t),\n                    set (i = !1) {\n                        toggleClass(e, t, i), e.setAttribute(\"aria-pressed\", i ? \"true\" : \"false\");\n                    }\n                });\n            };\n            Object.values(this.elements.buttons).filter(Boolean).forEach((t)=>{\n                is.array(t) || is.nodeList(t) ? Array.from(t).filter(Boolean).forEach(e) : e(t);\n            });\n        }\n        if (browser.isEdge && repaint(s), this.config.tooltips.controls) {\n            const { classNames: e, selectors: t } = this.config, i = `${t.controls.wrapper} ${t.labels} .${e.hidden}`, s = getElements.call(this, i);\n            Array.from(s).forEach((e)=>{\n                toggleClass(e, this.config.classNames.hidden, !1), toggleClass(e, this.config.classNames.tooltip, !0);\n            });\n        }\n    },\n    setMediaMetadata () {\n        try {\n            \"mediaSession\" in navigator && (navigator.mediaSession.metadata = new window.MediaMetadata({\n                title: this.config.mediaMetadata.title,\n                artist: this.config.mediaMetadata.artist,\n                album: this.config.mediaMetadata.album,\n                artwork: this.config.mediaMetadata.artwork\n            }));\n        } catch (e) {}\n    },\n    setMarkers () {\n        var e, t;\n        if (!this.duration || this.elements.markers) return;\n        const i = null === (e = this.config.markers) || void 0 === e || null === (t = e.points) || void 0 === t ? void 0 : t.filter(({ time: e })=>e > 0 && e < this.duration);\n        if (null == i || !i.length) return;\n        const s = document.createDocumentFragment(), n = document.createDocumentFragment();\n        let r = null;\n        const a = `${this.config.classNames.tooltip}--visible`, o = (e)=>toggleClass(r, a, e);\n        i.forEach((e)=>{\n            const t = createElement(\"span\", {\n                class: this.config.classNames.marker\n            }, \"\"), i = e.time / this.duration * 100 + \"%\";\n            r && (t.addEventListener(\"mouseenter\", ()=>{\n                e.label || (r.style.left = i, r.innerHTML = e.label, o(!0));\n            }), t.addEventListener(\"mouseleave\", ()=>{\n                o(!1);\n            })), t.addEventListener(\"click\", ()=>{\n                this.currentTime = e.time;\n            }), t.style.left = i, n.appendChild(t);\n        }), s.appendChild(n), this.config.tooltips.seek || (r = createElement(\"span\", {\n            class: this.config.classNames.tooltip\n        }, \"\"), s.appendChild(r)), this.elements.markers = {\n            points: n,\n            tip: r\n        }, this.elements.progress.appendChild(s);\n    }\n};\nfunction parseUrl(e, t = !0) {\n    let i = e;\n    if (t) {\n        const e = document.createElement(\"a\");\n        e.href = i, i = e.href;\n    }\n    try {\n        return new URL(i);\n    } catch (e) {\n        return null;\n    }\n}\nfunction buildUrlParams(e) {\n    const t = new URLSearchParams;\n    return is.object(e) && Object.entries(e).forEach(([e, i])=>{\n        t.set(e, i);\n    }), t;\n}\nconst captions = {\n    setup () {\n        if (!this.supported.ui) return;\n        if (!this.isVideo || this.isYouTube || this.isHTML5 && !support.textTracks) return void (is.array(this.config.controls) && this.config.controls.includes(\"settings\") && this.config.settings.includes(\"captions\") && controls.setCaptionsMenu.call(this));\n        if (is.element(this.elements.captions) || (this.elements.captions = createElement(\"div\", getAttributesFromSelector(this.config.selectors.captions)), this.elements.captions.setAttribute(\"dir\", \"auto\"), insertAfter(this.elements.captions, this.elements.wrapper)), browser.isIE && window.URL) {\n            const e = this.media.querySelectorAll(\"track\");\n            Array.from(e).forEach((e)=>{\n                const t = e.getAttribute(\"src\"), i = parseUrl(t);\n                null !== i && i.hostname !== window.location.href.hostname && [\n                    \"http:\",\n                    \"https:\"\n                ].includes(i.protocol) && fetch(t, \"blob\").then((t)=>{\n                    e.setAttribute(\"src\", window.URL.createObjectURL(t));\n                }).catch(()=>{\n                    removeElement(e);\n                });\n            });\n        }\n        const e = dedupe((navigator.languages || [\n            navigator.language || navigator.userLanguage || \"en\"\n        ]).map((e)=>e.split(\"-\")[0]));\n        let t = (this.storage.get(\"language\") || this.config.captions.language || \"auto\").toLowerCase();\n        \"auto\" === t && ([t] = e);\n        let i = this.storage.get(\"captions\");\n        if (is.boolean(i) || ({ active: i } = this.config.captions), Object.assign(this.captions, {\n            toggled: !1,\n            active: i,\n            language: t,\n            languages: e\n        }), this.isHTML5) {\n            const e = this.config.captions.update ? \"addtrack removetrack\" : \"removetrack\";\n            on.call(this, this.media.textTracks, e, captions.update.bind(this));\n        }\n        setTimeout(captions.update.bind(this), 0);\n    },\n    update () {\n        const e = captions.getTracks.call(this, !0), { active: t, language: i, meta: s, currentTrackNode: n } = this.captions, r = Boolean(e.find((e)=>e.language === i));\n        this.isHTML5 && this.isVideo && e.filter((e)=>!s.get(e)).forEach((e)=>{\n            this.debug.log(\"Track added\", e), s.set(e, {\n                default: \"showing\" === e.mode\n            }), \"showing\" === e.mode && (e.mode = \"hidden\"), on.call(this, e, \"cuechange\", ()=>captions.updateCues.call(this));\n        }), (r && this.language !== i || !e.includes(n)) && (captions.setLanguage.call(this, i), captions.toggle.call(this, t && r)), this.elements && toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is.empty(e)), is.array(this.config.controls) && this.config.controls.includes(\"settings\") && this.config.settings.includes(\"captions\") && controls.setCaptionsMenu.call(this);\n    },\n    toggle (e, t = !0) {\n        if (!this.supported.ui) return;\n        const { toggled: i } = this.captions, s = this.config.classNames.captions.active, n = is.nullOrUndefined(e) ? !i : e;\n        if (n !== i) {\n            if (t || (this.captions.active = n, this.storage.set({\n                captions: n\n            })), !this.language && n && !t) {\n                const e = captions.getTracks.call(this), t = captions.findTrack.call(this, [\n                    this.captions.language,\n                    ...this.captions.languages\n                ], !0);\n                return this.captions.language = t.language, void captions.set.call(this, e.indexOf(t));\n            }\n            this.elements.buttons.captions && (this.elements.buttons.captions.pressed = n), toggleClass(this.elements.container, s, n), this.captions.toggled = n, controls.updateSetting.call(this, \"captions\"), triggerEvent.call(this, this.media, n ? \"captionsenabled\" : \"captionsdisabled\");\n        }\n        setTimeout(()=>{\n            n && this.captions.toggled && (this.captions.currentTrackNode.mode = \"hidden\");\n        });\n    },\n    set (e, t = !0) {\n        const i = captions.getTracks.call(this);\n        if (-1 !== e) if (is.number(e)) if (e in i) {\n            if (this.captions.currentTrack !== e) {\n                this.captions.currentTrack = e;\n                const s = i[e], { language: n } = s || {};\n                this.captions.currentTrackNode = s, controls.updateSetting.call(this, \"captions\"), t || (this.captions.language = n, this.storage.set({\n                    language: n\n                })), this.isVimeo && this.embed.enableTextTrack(n), triggerEvent.call(this, this.media, \"languagechange\");\n            }\n            captions.toggle.call(this, !0, t), this.isHTML5 && this.isVideo && captions.updateCues.call(this);\n        } else this.debug.warn(\"Track not found\", e);\n        else this.debug.warn(\"Invalid caption argument\", e);\n        else captions.toggle.call(this, !1, t);\n    },\n    setLanguage (e, t = !0) {\n        if (!is.string(e)) return void this.debug.warn(\"Invalid language argument\", e);\n        const i = e.toLowerCase();\n        this.captions.language = i;\n        const s = captions.getTracks.call(this), n = captions.findTrack.call(this, [\n            i\n        ]);\n        captions.set.call(this, s.indexOf(n), t);\n    },\n    getTracks (e = !1) {\n        return Array.from((this.media || {}).textTracks || []).filter((t)=>!this.isHTML5 || e || this.captions.meta.has(t)).filter((e)=>[\n                \"captions\",\n                \"subtitles\"\n            ].includes(e.kind));\n    },\n    findTrack (e, t = !1) {\n        const i = captions.getTracks.call(this), s = (e)=>Number((this.captions.meta.get(e) || {}).default), n = Array.from(i).sort((e, t)=>s(t) - s(e));\n        let r;\n        return e.every((e)=>(r = n.find((t)=>t.language === e), !r)), r || (t ? n[0] : void 0);\n    },\n    getCurrentTrack () {\n        return captions.getTracks.call(this)[this.currentTrack];\n    },\n    getLabel (e) {\n        let t = e;\n        return !is.track(t) && support.textTracks && this.captions.toggled && (t = captions.getCurrentTrack.call(this)), is.track(t) ? is.empty(t.label) ? is.empty(t.language) ? i18n.get(\"enabled\", this.config) : e.language.toUpperCase() : t.label : i18n.get(\"disabled\", this.config);\n    },\n    updateCues (e) {\n        if (!this.supported.ui) return;\n        if (!is.element(this.elements.captions)) return void this.debug.warn(\"No captions element to render to\");\n        if (!is.nullOrUndefined(e) && !Array.isArray(e)) return void this.debug.warn(\"updateCues: Invalid input\", e);\n        let t = e;\n        if (!t) {\n            const e = captions.getCurrentTrack.call(this);\n            t = Array.from((e || {}).activeCues || []).map((e)=>e.getCueAsHTML()).map(getHTML);\n        }\n        const i = t.map((e)=>e.trim()).join(\"\\n\");\n        if (i !== this.elements.captions.innerHTML) {\n            emptyElement(this.elements.captions);\n            const e = createElement(\"span\", getAttributesFromSelector(this.config.selectors.caption));\n            e.innerHTML = i, this.elements.captions.appendChild(e), triggerEvent.call(this, this.media, \"cuechange\");\n        }\n    }\n}, defaults = {\n    enabled: !0,\n    title: \"\",\n    debug: !1,\n    autoplay: !1,\n    autopause: !0,\n    playsinline: !0,\n    seekTime: 10,\n    volume: 1,\n    muted: !1,\n    duration: null,\n    displayDuration: !0,\n    invertTime: !0,\n    toggleInvert: !0,\n    ratio: null,\n    clickToPlay: !0,\n    hideControls: !0,\n    resetOnEnd: !1,\n    disableContextMenu: !0,\n    loadSprite: !0,\n    iconPrefix: \"plyr\",\n    iconUrl: \"https://cdn.plyr.io/3.7.8/plyr.svg\",\n    blankVideo: \"https://cdn.plyr.io/static/blank.mp4\",\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240\n        ],\n        forced: !1,\n        onChange: null\n    },\n    loop: {\n        active: !1\n    },\n    speed: {\n        selected: 1,\n        options: [\n            .5,\n            .75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n            4\n        ]\n    },\n    keyboard: {\n        focused: !0,\n        global: !1\n    },\n    tooltips: {\n        controls: !1,\n        seek: !0\n    },\n    captions: {\n        active: !1,\n        language: \"auto\",\n        update: !1\n    },\n    fullscreen: {\n        enabled: !0,\n        fallback: !0,\n        iosNative: !1\n    },\n    storage: {\n        enabled: !0,\n        key: \"plyr\"\n    },\n    controls: [\n        \"play-large\",\n        \"play\",\n        \"progress\",\n        \"current-time\",\n        \"mute\",\n        \"volume\",\n        \"captions\",\n        \"settings\",\n        \"pip\",\n        \"airplay\",\n        \"fullscreen\"\n    ],\n    settings: [\n        \"captions\",\n        \"quality\",\n        \"speed\"\n    ],\n    i18n: {\n        restart: \"Restart\",\n        rewind: \"Rewind {seektime}s\",\n        play: \"Play\",\n        pause: \"Pause\",\n        fastForward: \"Forward {seektime}s\",\n        seek: \"Seek\",\n        seekLabel: \"{currentTime} of {duration}\",\n        played: \"Played\",\n        buffered: \"Buffered\",\n        currentTime: \"Current time\",\n        duration: \"Duration\",\n        volume: \"Volume\",\n        mute: \"Mute\",\n        unmute: \"Unmute\",\n        enableCaptions: \"Enable captions\",\n        disableCaptions: \"Disable captions\",\n        download: \"Download\",\n        enterFullscreen: \"Enter fullscreen\",\n        exitFullscreen: \"Exit fullscreen\",\n        frameTitle: \"Player for {title}\",\n        captions: \"Captions\",\n        settings: \"Settings\",\n        pip: \"PIP\",\n        menuBack: \"Go back to previous menu\",\n        speed: \"Speed\",\n        normal: \"Normal\",\n        quality: \"Quality\",\n        loop: \"Loop\",\n        start: \"Start\",\n        end: \"End\",\n        all: \"All\",\n        reset: \"Reset\",\n        disabled: \"Disabled\",\n        enabled: \"Enabled\",\n        advertisement: \"Ad\",\n        qualityBadge: {\n            2160: \"4K\",\n            1440: \"HD\",\n            1080: \"HD\",\n            720: \"HD\",\n            576: \"SD\",\n            480: \"SD\"\n        }\n    },\n    urls: {\n        download: null,\n        vimeo: {\n            sdk: \"https://player.vimeo.com/api/player.js\",\n            iframe: \"https://player.vimeo.com/video/{0}?{1}\",\n            api: \"https://vimeo.com/api/oembed.json?url={0}\"\n        },\n        youtube: {\n            sdk: \"https://www.youtube.com/iframe_api\",\n            api: \"https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}\"\n        },\n        googleIMA: {\n            sdk: \"https://imasdk.googleapis.com/js/sdkloader/ima3.js\"\n        }\n    },\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        download: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null\n    },\n    events: [\n        \"ended\",\n        \"progress\",\n        \"stalled\",\n        \"playing\",\n        \"waiting\",\n        \"canplay\",\n        \"canplaythrough\",\n        \"loadstart\",\n        \"loadeddata\",\n        \"loadedmetadata\",\n        \"timeupdate\",\n        \"volumechange\",\n        \"play\",\n        \"pause\",\n        \"error\",\n        \"seeking\",\n        \"seeked\",\n        \"emptied\",\n        \"ratechange\",\n        \"cuechange\",\n        \"download\",\n        \"enterfullscreen\",\n        \"exitfullscreen\",\n        \"captionsenabled\",\n        \"captionsdisabled\",\n        \"languagechange\",\n        \"controlshidden\",\n        \"controlsshown\",\n        \"ready\",\n        \"statechange\",\n        \"qualitychange\",\n        \"adsloaded\",\n        \"adscontentpause\",\n        \"adscontentresume\",\n        \"adstarted\",\n        \"adsmidpoint\",\n        \"adscomplete\",\n        \"adsallcomplete\",\n        \"adsimpression\",\n        \"adsclick\"\n    ],\n    selectors: {\n        editable: \"input, textarea, select, [contenteditable]\",\n        container: \".plyr\",\n        controls: {\n            container: null,\n            wrapper: \".plyr__controls\"\n        },\n        labels: \"[data-plyr]\",\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            download: '[data-plyr=\"download\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]'\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]'\n        },\n        display: {\n            currentTime: \".plyr__time--current\",\n            duration: \".plyr__time--duration\",\n            buffer: \".plyr__progress__buffer\",\n            loop: \".plyr__progress__loop\",\n            volume: \".plyr__volume--display\"\n        },\n        progress: \".plyr__progress\",\n        captions: \".plyr__captions\",\n        caption: \".plyr__caption\"\n    },\n    classNames: {\n        type: \"plyr--{0}\",\n        provider: \"plyr--{0}\",\n        video: \"plyr__video-wrapper\",\n        embed: \"plyr__video-embed\",\n        videoFixedRatio: \"plyr__video-wrapper--fixed-ratio\",\n        embedContainer: \"plyr__video-embed__container\",\n        poster: \"plyr__poster\",\n        posterEnabled: \"plyr__poster-enabled\",\n        ads: \"plyr__ads\",\n        control: \"plyr__control\",\n        controlPressed: \"plyr__control--pressed\",\n        playing: \"plyr--playing\",\n        paused: \"plyr--paused\",\n        stopped: \"plyr--stopped\",\n        loading: \"plyr--loading\",\n        hover: \"plyr--hover\",\n        tooltip: \"plyr__tooltip\",\n        cues: \"plyr__cues\",\n        marker: \"plyr__progress__marker\",\n        hidden: \"plyr__sr-only\",\n        hideControls: \"plyr--hide-controls\",\n        isTouch: \"plyr--is-touch\",\n        uiSupported: \"plyr--full-ui\",\n        noTransition: \"plyr--no-transition\",\n        display: {\n            time: \"plyr__time\"\n        },\n        menu: {\n            value: \"plyr__menu__value\",\n            badge: \"plyr__badge\",\n            open: \"plyr--menu-open\"\n        },\n        captions: {\n            enabled: \"plyr--captions-enabled\",\n            active: \"plyr--captions-active\"\n        },\n        fullscreen: {\n            enabled: \"plyr--fullscreen-enabled\",\n            fallback: \"plyr--fullscreen-fallback\"\n        },\n        pip: {\n            supported: \"plyr--pip-supported\",\n            active: \"plyr--pip-active\"\n        },\n        airplay: {\n            supported: \"plyr--airplay-supported\",\n            active: \"plyr--airplay-active\"\n        },\n        previewThumbnails: {\n            thumbContainer: \"plyr__preview-thumb\",\n            thumbContainerShown: \"plyr__preview-thumb--is-shown\",\n            imageContainer: \"plyr__preview-thumb__image-container\",\n            timeContainer: \"plyr__preview-thumb__time-container\",\n            scrubbingContainer: \"plyr__preview-scrubbing\",\n            scrubbingContainerShown: \"plyr__preview-scrubbing--is-shown\"\n        }\n    },\n    attributes: {\n        embed: {\n            provider: \"data-plyr-provider\",\n            id: \"data-plyr-embed-id\",\n            hash: \"data-plyr-embed-hash\"\n        }\n    },\n    ads: {\n        enabled: !1,\n        publisherId: \"\",\n        tagUrl: \"\"\n    },\n    previewThumbnails: {\n        enabled: !1,\n        src: \"\"\n    },\n    vimeo: {\n        byline: !1,\n        portrait: !1,\n        title: !1,\n        speed: !0,\n        transparent: !1,\n        customControls: !0,\n        referrerPolicy: null,\n        premium: !1\n    },\n    youtube: {\n        rel: 0,\n        showinfo: 0,\n        iv_load_policy: 3,\n        modestbranding: 1,\n        customControls: !0,\n        noCookie: !1\n    },\n    mediaMetadata: {\n        title: \"\",\n        artist: \"\",\n        album: \"\",\n        artwork: []\n    },\n    markers: {\n        enabled: !1,\n        points: []\n    }\n}, pip = {\n    active: \"picture-in-picture\",\n    inactive: \"inline\"\n}, providers = {\n    html5: \"html5\",\n    youtube: \"youtube\",\n    vimeo: \"vimeo\"\n}, types = {\n    audio: \"audio\",\n    video: \"video\"\n};\nfunction getProviderByUrl(e) {\n    return /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtube-nocookie\\.com|youtu\\.?be)\\/.+$/.test(e) ? providers.youtube : /^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(e) ? providers.vimeo : null;\n}\nconst noop = ()=>{};\nclass Console {\n    constructor(e = !1){\n        this.enabled = window.console && e, this.enabled && this.log(\"Debugging enabled\");\n    }\n    get log() {\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\nclass Fullscreen {\n    constructor(e){\n        _defineProperty$1(this, \"onChange\", ()=>{\n            if (!this.supported) return;\n            const e = this.player.elements.buttons.fullscreen;\n            is.element(e) && (e.pressed = this.active);\n            const t = this.target === this.player.media ? this.target : this.player.elements.container;\n            triggerEvent.call(this.player, t, this.active ? \"enterfullscreen\" : \"exitfullscreen\", !0);\n        }), _defineProperty$1(this, \"toggleFallback\", (e = !1)=>{\n            if (e ? this.scrollPosition = {\n                x: window.scrollX ?? 0,\n                y: window.scrollY ?? 0\n            } : window.scrollTo(this.scrollPosition.x, this.scrollPosition.y), document.body.style.overflow = e ? \"hidden\" : \"\", toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, e), browser.isIos) {\n                let t = document.head.querySelector('meta[name=\"viewport\"]');\n                const i = \"viewport-fit=cover\";\n                t || (t = document.createElement(\"meta\"), t.setAttribute(\"name\", \"viewport\"));\n                const s = is.string(t.content) && t.content.includes(i);\n                e ? (this.cleanupViewport = !s, s || (t.content += `,${i}`)) : this.cleanupViewport && (t.content = t.content.split(\",\").filter((e)=>e.trim() !== i).join(\",\"));\n            }\n            this.onChange();\n        }), _defineProperty$1(this, \"trapFocus\", (e)=>{\n            if (browser.isIos || browser.isIPadOS || !this.active || \"Tab\" !== e.key) return;\n            const t = document.activeElement, i = getElements.call(this.player, \"a[href], button:not(:disabled), input:not(:disabled), [tabindex]\"), [s] = i, n = i[i.length - 1];\n            t !== n || e.shiftKey ? t === s && e.shiftKey && (n.focus(), e.preventDefault()) : (s.focus(), e.preventDefault());\n        }), _defineProperty$1(this, \"update\", ()=>{\n            if (this.supported) {\n                let e;\n                e = this.forceFallback ? \"Fallback (forced)\" : Fullscreen.nativeSupported ? \"Native\" : \"Fallback\", this.player.debug.log(`${e} fullscreen enabled`);\n            } else this.player.debug.log(\"Fullscreen not supported and fallback disabled\");\n            toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.supported);\n        }), _defineProperty$1(this, \"enter\", ()=>{\n            this.supported && (browser.isIos && this.player.config.fullscreen.iosNative ? this.player.isVimeo ? this.player.embed.requestFullscreen() : this.target.webkitEnterFullscreen() : !Fullscreen.nativeSupported || this.forceFallback ? this.toggleFallback(!0) : this.prefix ? is.empty(this.prefix) || this.target[`${this.prefix}Request${this.property}`]() : this.target.requestFullscreen({\n                navigationUI: \"hide\"\n            }));\n        }), _defineProperty$1(this, \"exit\", ()=>{\n            if (this.supported) if (browser.isIos && this.player.config.fullscreen.iosNative) this.player.isVimeo ? this.player.embed.exitFullscreen() : this.target.webkitEnterFullscreen(), silencePromise(this.player.play());\n            else if (!Fullscreen.nativeSupported || this.forceFallback) this.toggleFallback(!1);\n            else if (this.prefix) {\n                if (!is.empty(this.prefix)) {\n                    const e = \"moz\" === this.prefix ? \"Cancel\" : \"Exit\";\n                    document[`${this.prefix}${e}${this.property}`]();\n                }\n            } else (document.cancelFullScreen || document.exitFullscreen).call(document);\n        }), _defineProperty$1(this, \"toggle\", ()=>{\n            this.active ? this.exit() : this.enter();\n        }), this.player = e, this.prefix = Fullscreen.prefix, this.property = Fullscreen.property, this.scrollPosition = {\n            x: 0,\n            y: 0\n        }, this.forceFallback = \"force\" === e.config.fullscreen.fallback, this.player.elements.fullscreen = e.config.fullscreen.container && closest$1(this.player.elements.container, e.config.fullscreen.container), on.call(this.player, document, \"ms\" === this.prefix ? \"MSFullscreenChange\" : `${this.prefix}fullscreenchange`, ()=>{\n            this.onChange();\n        }), on.call(this.player, this.player.elements.container, \"dblclick\", (e)=>{\n            is.element(this.player.elements.controls) && this.player.elements.controls.contains(e.target) || this.player.listeners.proxy(e, this.toggle, \"fullscreen\");\n        }), on.call(this, this.player.elements.container, \"keydown\", (e)=>this.trapFocus(e)), this.update();\n    }\n    static get nativeSupported() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n    get useNative() {\n        return Fullscreen.nativeSupported && !this.forceFallback;\n    }\n    static get prefix() {\n        if (is.function(document.exitFullscreen)) return \"\";\n        let e = \"\";\n        return [\n            \"webkit\",\n            \"moz\",\n            \"ms\"\n        ].some((t)=>!(!is.function(document[`${t}ExitFullscreen`]) && !is.function(document[`${t}CancelFullScreen`])) && (e = t, !0)), e;\n    }\n    static get property() {\n        return \"moz\" === this.prefix ? \"FullScreen\" : \"Fullscreen\";\n    }\n    get supported() {\n        return [\n            this.player.config.fullscreen.enabled,\n            this.player.isVideo,\n            Fullscreen.nativeSupported || this.player.config.fullscreen.fallback,\n            !this.player.isYouTube || Fullscreen.nativeSupported || !browser.isIos || this.player.config.playsinline && !this.player.config.fullscreen.iosNative\n        ].every(Boolean);\n    }\n    get active() {\n        if (!this.supported) return !1;\n        if (!Fullscreen.nativeSupported || this.forceFallback) return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        const e = this.prefix ? this.target.getRootNode()[`${this.prefix}${this.property}Element`] : this.target.getRootNode().fullscreenElement;\n        return e && e.shadowRoot ? e === this.target.getRootNode().host : e === this.target;\n    }\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.fullscreen ?? this.player.elements.container;\n    }\n}\nfunction loadImage(e, t = 1) {\n    return new Promise((i, s)=>{\n        const n = new Image, r = ()=>{\n            delete n.onload, delete n.onerror, (n.naturalWidth >= t ? i : s)(n);\n        };\n        Object.assign(n, {\n            onload: r,\n            onerror: r,\n            src: e\n        });\n    });\n}\nconst ui = {\n    addStyleHook () {\n        toggleClass(this.elements.container, this.config.selectors.container.replace(\".\", \"\"), !0), toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n    toggleNativeControls (e = !1) {\n        e && this.isHTML5 ? this.media.setAttribute(\"controls\", \"\") : this.media.removeAttribute(\"controls\");\n    },\n    build () {\n        if (this.listeners.media(), !this.supported.ui) return this.debug.warn(`Basic support only for ${this.provider} ${this.type}`), void ui.toggleNativeControls.call(this, !0);\n        is.element(this.elements.controls) || (controls.inject.call(this), this.listeners.controls()), ui.toggleNativeControls.call(this), this.isHTML5 && captions.setup.call(this), this.volume = null, this.muted = null, this.loop = null, this.quality = null, this.speed = null, controls.updateVolume.call(this), controls.timeUpdate.call(this), controls.durationUpdate.call(this), ui.checkPlaying.call(this), toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo), toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5), toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch), this.ready = !0, setTimeout(()=>{\n            triggerEvent.call(this, this.media, \"ready\");\n        }, 0), ui.setTitle.call(this), this.poster && ui.setPoster.call(this, this.poster, !1).catch(()=>{}), this.config.duration && controls.durationUpdate.call(this), this.config.mediaMetadata && controls.setMediaMetadata.call(this);\n    },\n    setTitle () {\n        let e = i18n.get(\"play\", this.config);\n        if (is.string(this.config.title) && !is.empty(this.config.title) && (e += `, ${this.config.title}`), Array.from(this.elements.buttons.play || []).forEach((t)=>{\n            t.setAttribute(\"aria-label\", e);\n        }), this.isEmbed) {\n            const e = getElement.call(this, \"iframe\");\n            if (!is.element(e)) return;\n            const t = is.empty(this.config.title) ? \"video\" : this.config.title, i = i18n.get(\"frameTitle\", this.config);\n            e.setAttribute(\"title\", i.replace(\"{title}\", t));\n        }\n    },\n    togglePoster (e) {\n        toggleClass(this.elements.container, this.config.classNames.posterEnabled, e);\n    },\n    setPoster (e, t = !0) {\n        return t && this.poster ? Promise.reject(new Error(\"Poster already set\")) : (this.media.setAttribute(\"data-poster\", e), this.elements.poster.removeAttribute(\"hidden\"), ready.call(this).then(()=>loadImage(e)).catch((t)=>{\n            throw e === this.poster && ui.togglePoster.call(this, !1), t;\n        }).then(()=>{\n            if (e !== this.poster) throw new Error(\"setPoster cancelled by later call to setPoster\");\n        }).then(()=>(Object.assign(this.elements.poster.style, {\n                backgroundImage: `url('${e}')`,\n                backgroundSize: \"\"\n            }), ui.togglePoster.call(this, !0), e)));\n    },\n    checkPlaying (e) {\n        toggleClass(this.elements.container, this.config.classNames.playing, this.playing), toggleClass(this.elements.container, this.config.classNames.paused, this.paused), toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped), Array.from(this.elements.buttons.play || []).forEach((e)=>{\n            Object.assign(e, {\n                pressed: this.playing\n            }), e.setAttribute(\"aria-label\", i18n.get(this.playing ? \"pause\" : \"play\", this.config));\n        }), is.event(e) && \"timeupdate\" === e.type || ui.toggleControls.call(this);\n    },\n    checkLoading (e) {\n        this.loading = [\n            \"stalled\",\n            \"waiting\"\n        ].includes(e.type), clearTimeout(this.timers.loading), this.timers.loading = setTimeout(()=>{\n            toggleClass(this.elements.container, this.config.classNames.loading, this.loading), ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n    toggleControls (e) {\n        const { controls: t } = this.elements;\n        if (t && this.config.hideControls) {\n            const i = this.touch && this.lastSeekTime + 2e3 > Date.now();\n            this.toggleControls(Boolean(e || this.loading || this.paused || t.pressed || t.hover || i));\n        }\n    },\n    migrateStyles () {\n        Object.values({\n            ...this.media.style\n        }).filter((e)=>!is.empty(e) && is.string(e) && e.startsWith(\"--plyr\")).forEach((e)=>{\n            this.elements.container.style.setProperty(e, this.media.style.getPropertyValue(e)), this.media.style.removeProperty(e);\n        }), is.empty(this.media.style) && this.media.removeAttribute(\"style\");\n    }\n};\nclass Listeners {\n    constructor(e){\n        _defineProperty$1(this, \"firstTouch\", ()=>{\n            const { player: e } = this, { elements: t } = e;\n            e.touch = !0, toggleClass(t.container, e.config.classNames.isTouch, !0);\n        }), _defineProperty$1(this, \"global\", (e = !0)=>{\n            const { player: t } = this;\n            t.config.keyboard.global && toggleListener.call(t, window, \"keydown keyup\", this.handleKey, e, !1), toggleListener.call(t, document.body, \"click\", this.toggleMenu, e), once.call(t, document.body, \"touchstart\", this.firstTouch);\n        }), _defineProperty$1(this, \"container\", ()=>{\n            const { player: e } = this, { config: t, elements: i, timers: s } = e;\n            !t.keyboard.global && t.keyboard.focused && on.call(e, i.container, \"keydown keyup\", this.handleKey, !1), on.call(e, i.container, \"mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen\", (t)=>{\n                const { controls: n } = i;\n                n && \"enterfullscreen\" === t.type && (n.pressed = !1, n.hover = !1);\n                let r = 0;\n                [\n                    \"touchstart\",\n                    \"touchmove\",\n                    \"mousemove\"\n                ].includes(t.type) && (ui.toggleControls.call(e, !0), r = e.touch ? 3e3 : 2e3), clearTimeout(s.controls), s.controls = setTimeout(()=>ui.toggleControls.call(e, !1), r);\n            });\n            const n = ()=>{\n                if (!e.isVimeo || e.config.vimeo.premium) return;\n                const t = i.wrapper, { active: s } = e.fullscreen, [n, r] = getAspectRatio.call(e), a = supportsCSS(`aspect-ratio: ${n} / ${r}`);\n                if (!s) return void (a ? (t.style.width = null, t.style.height = null) : (t.style.maxWidth = null, t.style.margin = null));\n                const [o, l] = getViewportSize(), c = o / l > n / r;\n                a ? (t.style.width = c ? \"auto\" : \"100%\", t.style.height = c ? \"100%\" : \"auto\") : (t.style.maxWidth = c ? l / r * n + \"px\" : null, t.style.margin = c ? \"0 auto\" : null);\n            }, r = ()=>{\n                clearTimeout(s.resized), s.resized = setTimeout(n, 50);\n            };\n            on.call(e, i.container, \"enterfullscreen exitfullscreen\", (t)=>{\n                const { target: s } = e.fullscreen;\n                if (s !== i.container) return;\n                if (!e.isEmbed && is.empty(e.config.ratio)) return;\n                n();\n                (\"enterfullscreen\" === t.type ? on : off).call(e, window, \"resize\", r);\n            });\n        }), _defineProperty$1(this, \"media\", ()=>{\n            const { player: e } = this, { elements: t } = e;\n            if (on.call(e, e.media, \"timeupdate seeking seeked\", (t)=>controls.timeUpdate.call(e, t)), on.call(e, e.media, \"durationchange loadeddata loadedmetadata\", (t)=>controls.durationUpdate.call(e, t)), on.call(e, e.media, \"ended\", ()=>{\n                e.isHTML5 && e.isVideo && e.config.resetOnEnd && (e.restart(), e.pause());\n            }), on.call(e, e.media, \"progress playing seeking seeked\", (t)=>controls.updateProgress.call(e, t)), on.call(e, e.media, \"volumechange\", (t)=>controls.updateVolume.call(e, t)), on.call(e, e.media, \"playing play pause ended emptied timeupdate\", (t)=>ui.checkPlaying.call(e, t)), on.call(e, e.media, \"waiting canplay seeked playing\", (t)=>ui.checkLoading.call(e, t)), e.supported.ui && e.config.clickToPlay && !e.isAudio) {\n                const i = getElement.call(e, `.${e.config.classNames.video}`);\n                if (!is.element(i)) return;\n                on.call(e, t.container, \"click\", (s)=>{\n                    ([\n                        t.container,\n                        i\n                    ].includes(s.target) || i.contains(s.target)) && (e.touch && e.config.hideControls || (e.ended ? (this.proxy(s, e.restart, \"restart\"), this.proxy(s, ()=>{\n                        silencePromise(e.play());\n                    }, \"play\")) : this.proxy(s, ()=>{\n                        silencePromise(e.togglePlay());\n                    }, \"play\")));\n                });\n            }\n            e.supported.ui && e.config.disableContextMenu && on.call(e, t.wrapper, \"contextmenu\", (e)=>{\n                e.preventDefault();\n            }, !1), on.call(e, e.media, \"volumechange\", ()=>{\n                e.storage.set({\n                    volume: e.volume,\n                    muted: e.muted\n                });\n            }), on.call(e, e.media, \"ratechange\", ()=>{\n                controls.updateSetting.call(e, \"speed\"), e.storage.set({\n                    speed: e.speed\n                });\n            }), on.call(e, e.media, \"qualitychange\", (t)=>{\n                controls.updateSetting.call(e, \"quality\", null, t.detail.quality);\n            }), on.call(e, e.media, \"ready qualitychange\", ()=>{\n                controls.setDownloadUrl.call(e);\n            });\n            const i = e.config.events.concat([\n                \"keyup\",\n                \"keydown\"\n            ]).join(\" \");\n            on.call(e, e.media, i, (i)=>{\n                let { detail: s = {} } = i;\n                \"error\" === i.type && (s = e.media.error), triggerEvent.call(e, t.container, i.type, !0, s);\n            });\n        }), _defineProperty$1(this, \"proxy\", (e, t, i)=>{\n            const { player: s } = this, n = s.config.listeners[i];\n            let r = !0;\n            is.function(n) && (r = n.call(s, e)), !1 !== r && is.function(t) && t.call(s, e);\n        }), _defineProperty$1(this, \"bind\", (e, t, i, s, n = !0)=>{\n            const { player: r } = this, a = r.config.listeners[s], o = is.function(a);\n            on.call(r, e, t, (e)=>this.proxy(e, i, s), n && !o);\n        }), _defineProperty$1(this, \"controls\", ()=>{\n            const { player: e } = this, { elements: t } = e, i = browser.isIE ? \"change\" : \"input\";\n            if (t.buttons.play && Array.from(t.buttons.play).forEach((t)=>{\n                this.bind(t, \"click\", ()=>{\n                    silencePromise(e.togglePlay());\n                }, \"play\");\n            }), this.bind(t.buttons.restart, \"click\", e.restart, \"restart\"), this.bind(t.buttons.rewind, \"click\", ()=>{\n                e.lastSeekTime = Date.now(), e.rewind();\n            }, \"rewind\"), this.bind(t.buttons.fastForward, \"click\", ()=>{\n                e.lastSeekTime = Date.now(), e.forward();\n            }, \"fastForward\"), this.bind(t.buttons.mute, \"click\", ()=>{\n                e.muted = !e.muted;\n            }, \"mute\"), this.bind(t.buttons.captions, \"click\", ()=>e.toggleCaptions()), this.bind(t.buttons.download, \"click\", ()=>{\n                triggerEvent.call(e, e.media, \"download\");\n            }, \"download\"), this.bind(t.buttons.fullscreen, \"click\", ()=>{\n                e.fullscreen.toggle();\n            }, \"fullscreen\"), this.bind(t.buttons.pip, \"click\", ()=>{\n                e.pip = \"toggle\";\n            }, \"pip\"), this.bind(t.buttons.airplay, \"click\", e.airplay, \"airplay\"), this.bind(t.buttons.settings, \"click\", (t)=>{\n                t.stopPropagation(), t.preventDefault(), controls.toggleMenu.call(e, t);\n            }, null, !1), this.bind(t.buttons.settings, \"keyup\", (t)=>{\n                [\n                    \" \",\n                    \"Enter\"\n                ].includes(t.key) && (\"Enter\" !== t.key ? (t.preventDefault(), t.stopPropagation(), controls.toggleMenu.call(e, t)) : controls.focusFirstMenuItem.call(e, null, !0));\n            }, null, !1), this.bind(t.settings.menu, \"keydown\", (t)=>{\n                \"Escape\" === t.key && controls.toggleMenu.call(e, t);\n            }), this.bind(t.inputs.seek, \"mousedown mousemove\", (e)=>{\n                const i = t.progress.getBoundingClientRect(), s = 100 / i.width * (e.pageX - i.left);\n                e.currentTarget.setAttribute(\"seek-value\", s);\n            }), this.bind(t.inputs.seek, \"mousedown mouseup keydown keyup touchstart touchend\", (t)=>{\n                const i = t.currentTarget, s = \"play-on-seeked\";\n                if (is.keyboardEvent(t) && ![\n                    \"ArrowLeft\",\n                    \"ArrowRight\"\n                ].includes(t.key)) return;\n                e.lastSeekTime = Date.now();\n                const n = i.hasAttribute(s), r = [\n                    \"mouseup\",\n                    \"touchend\",\n                    \"keyup\"\n                ].includes(t.type);\n                n && r ? (i.removeAttribute(s), silencePromise(e.play())) : !r && e.playing && (i.setAttribute(s, \"\"), e.pause());\n            }), browser.isIos) {\n                const t = getElements.call(e, 'input[type=\"range\"]');\n                Array.from(t).forEach((e)=>this.bind(e, i, (e)=>repaint(e.target)));\n            }\n            this.bind(t.inputs.seek, i, (t)=>{\n                const i = t.currentTarget;\n                let s = i.getAttribute(\"seek-value\");\n                is.empty(s) && (s = i.value), i.removeAttribute(\"seek-value\"), e.currentTime = s / i.max * e.duration;\n            }, \"seek\"), this.bind(t.progress, \"mouseenter mouseleave mousemove\", (t)=>controls.updateSeekTooltip.call(e, t)), this.bind(t.progress, \"mousemove touchmove\", (t)=>{\n                const { previewThumbnails: i } = e;\n                i && i.loaded && i.startMove(t);\n            }), this.bind(t.progress, \"mouseleave touchend click\", ()=>{\n                const { previewThumbnails: t } = e;\n                t && t.loaded && t.endMove(!1, !0);\n            }), this.bind(t.progress, \"mousedown touchstart\", (t)=>{\n                const { previewThumbnails: i } = e;\n                i && i.loaded && i.startScrubbing(t);\n            }), this.bind(t.progress, \"mouseup touchend\", (t)=>{\n                const { previewThumbnails: i } = e;\n                i && i.loaded && i.endScrubbing(t);\n            }), browser.isWebKit && Array.from(getElements.call(e, 'input[type=\"range\"]')).forEach((t)=>{\n                this.bind(t, \"input\", (t)=>controls.updateRangeFill.call(e, t.target));\n            }), e.config.toggleInvert && !is.element(t.display.duration) && this.bind(t.display.currentTime, \"click\", ()=>{\n                0 !== e.currentTime && (e.config.invertTime = !e.config.invertTime, controls.timeUpdate.call(e));\n            }), this.bind(t.inputs.volume, i, (t)=>{\n                e.volume = t.target.value;\n            }, \"volume\"), this.bind(t.controls, \"mouseenter mouseleave\", (i)=>{\n                t.controls.hover = !e.touch && \"mouseenter\" === i.type;\n            }), t.fullscreen && Array.from(t.fullscreen.children).filter((e)=>!e.contains(t.container)).forEach((i)=>{\n                this.bind(i, \"mouseenter mouseleave\", (i)=>{\n                    t.controls && (t.controls.hover = !e.touch && \"mouseenter\" === i.type);\n                });\n            }), this.bind(t.controls, \"mousedown mouseup touchstart touchend touchcancel\", (e)=>{\n                t.controls.pressed = [\n                    \"mousedown\",\n                    \"touchstart\"\n                ].includes(e.type);\n            }), this.bind(t.controls, \"focusin\", ()=>{\n                const { config: i, timers: s } = e;\n                toggleClass(t.controls, i.classNames.noTransition, !0), ui.toggleControls.call(e, !0), setTimeout(()=>{\n                    toggleClass(t.controls, i.classNames.noTransition, !1);\n                }, 0);\n                const n = this.touch ? 3e3 : 4e3;\n                clearTimeout(s.controls), s.controls = setTimeout(()=>ui.toggleControls.call(e, !1), n);\n            }), this.bind(t.inputs.volume, \"wheel\", (t)=>{\n                const i = t.webkitDirectionInvertedFromDevice, [s, n] = [\n                    t.deltaX,\n                    -t.deltaY\n                ].map((e)=>i ? -e : e), r = Math.sign(Math.abs(s) > Math.abs(n) ? s : n);\n                e.increaseVolume(r / 50);\n                const { volume: a } = e.media;\n                (1 === r && a < 1 || -1 === r && a > 0) && t.preventDefault();\n            }, \"volume\", !1);\n        }), this.player = e, this.lastKey = null, this.focusTimer = null, this.lastKeyDown = null, this.handleKey = this.handleKey.bind(this), this.toggleMenu = this.toggleMenu.bind(this), this.firstTouch = this.firstTouch.bind(this);\n    }\n    handleKey(e) {\n        const { player: t } = this, { elements: i } = t, { key: s, type: n, altKey: r, ctrlKey: a, metaKey: o, shiftKey: l } = e, c = \"keydown\" === n, u = c && s === this.lastKey;\n        if (r || a || o || l) return;\n        if (!s) return;\n        if (c) {\n            const n = document.activeElement;\n            if (is.element(n)) {\n                const { editable: s } = t.config.selectors, { seek: r } = i.inputs;\n                if (n !== r && matches(n, s)) return;\n                if (\" \" === e.key && matches(n, 'button, [role^=\"menuitem\"]')) return;\n            }\n            switch([\n                \" \",\n                \"ArrowLeft\",\n                \"ArrowUp\",\n                \"ArrowRight\",\n                \"ArrowDown\",\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"9\",\n                \"c\",\n                \"f\",\n                \"k\",\n                \"l\",\n                \"m\"\n            ].includes(s) && (e.preventDefault(), e.stopPropagation()), s){\n                case \"0\":\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    u || (d = parseInt(s, 10), t.currentTime = t.duration / 10 * d);\n                    break;\n                case \" \":\n                case \"k\":\n                    u || silencePromise(t.togglePlay());\n                    break;\n                case \"ArrowUp\":\n                    t.increaseVolume(.1);\n                    break;\n                case \"ArrowDown\":\n                    t.decreaseVolume(.1);\n                    break;\n                case \"m\":\n                    u || (t.muted = !t.muted);\n                    break;\n                case \"ArrowRight\":\n                    t.forward();\n                    break;\n                case \"ArrowLeft\":\n                    t.rewind();\n                    break;\n                case \"f\":\n                    t.fullscreen.toggle();\n                    break;\n                case \"c\":\n                    u || t.toggleCaptions();\n                    break;\n                case \"l\":\n                    t.loop = !t.loop;\n            }\n            \"Escape\" === s && !t.fullscreen.usingNative && t.fullscreen.active && t.fullscreen.toggle(), this.lastKey = s;\n        } else this.lastKey = null;\n        var d;\n    }\n    toggleMenu(e) {\n        controls.toggleMenu.call(this.player, e);\n    }\n}\nvar commonjsGlobal = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction createCommonjsModule(e, t) {\n    return e(t = {\n        exports: {}\n    }, t.exports), t.exports;\n}\nvar loadjs_umd = createCommonjsModule(function(e, t) {\n    e.exports = function() {\n        var e = function() {}, t = {}, i = {}, s = {};\n        function n(e, t) {\n            e = e.push ? e : [\n                e\n            ];\n            var n, r, a, o = [], l = e.length, c = l;\n            for(n = function(e, i) {\n                i.length && o.push(e), --c || t(o);\n            }; l--;)r = e[l], (a = i[r]) ? n(r, a) : (s[r] = s[r] || []).push(n);\n        }\n        function r(e, t) {\n            if (e) {\n                var n = s[e];\n                if (i[e] = t, n) for(; n.length;)n[0](e, t), n.splice(0, 1);\n            }\n        }\n        function a(t, i) {\n            t.call && (t = {\n                success: t\n            }), i.length ? (t.error || e)(i) : (t.success || e)(t);\n        }\n        function o(t, i, s, n) {\n            var r, a, l = document, c = s.async, u = (s.numRetries || 0) + 1, d = s.before || e, h = t.replace(/[\\?|#].*$/, \"\"), m = t.replace(/^(css|img)!/, \"\");\n            n = n || 0, /(^css!|\\.css$)/.test(h) ? ((a = l.createElement(\"link\")).rel = \"stylesheet\", a.href = m, (r = \"hideFocus\" in a) && a.relList && (r = 0, a.rel = \"preload\", a.as = \"style\")) : /(^img!|\\.(png|gif|jpg|svg|webp)$)/.test(h) ? (a = l.createElement(\"img\")).src = m : ((a = l.createElement(\"script\")).src = t, a.async = void 0 === c || c), a.onload = a.onerror = a.onbeforeload = function(e) {\n                var l = e.type[0];\n                if (r) try {\n                    a.sheet.cssText.length || (l = \"e\");\n                } catch (e) {\n                    18 != e.code && (l = \"e\");\n                }\n                if (\"e\" == l) {\n                    if ((n += 1) < u) return o(t, i, s, n);\n                } else if (\"preload\" == a.rel && \"style\" == a.as) return a.rel = \"stylesheet\";\n                i(t, l, e.defaultPrevented);\n            }, !1 !== d(t, a) && l.head.appendChild(a);\n        }\n        function l(e, t, i) {\n            var s, n, r = (e = e.push ? e : [\n                e\n            ]).length, a = r, l = [];\n            for(s = function(e, i, s) {\n                if (\"e\" == i && l.push(e), \"b\" == i) {\n                    if (!s) return;\n                    l.push(e);\n                }\n                --r || t(l);\n            }, n = 0; n < a; n++)o(e[n], s, i);\n        }\n        function c(e, i, s) {\n            var n, o;\n            if (i && i.trim && (n = i), o = (n ? s : i) || {}, n) {\n                if (n in t) throw \"LoadJS\";\n                t[n] = !0;\n            }\n            function c(t, i) {\n                l(e, function(e) {\n                    a(o, e), t && a({\n                        success: t,\n                        error: i\n                    }, e), r(n, e);\n                }, o);\n            }\n            if (o.returnPromise) return new Promise(c);\n            c();\n        }\n        return c.ready = function(e, t) {\n            return n(e, function(e) {\n                a(t, e);\n            }), c;\n        }, c.done = function(e) {\n            r(e, []);\n        }, c.reset = function() {\n            t = {}, i = {}, s = {};\n        }, c.isDefined = function(e) {\n            return e in t;\n        }, c;\n    }();\n});\nfunction loadScript(e) {\n    return new Promise((t, i)=>{\n        loadjs_umd(e, {\n            success: t,\n            error: i\n        });\n    });\n}\nfunction parseId$1(e) {\n    if (is.empty(e)) return null;\n    if (is.number(Number(e))) return e;\n    return e.match(/^.*(vimeo.com\\/|video\\/)(\\d+).*/) ? RegExp.$2 : e;\n}\nfunction parseHash(e) {\n    const t = e.match(/^.*(vimeo.com\\/|video\\/)(\\d+)(\\?.*&*h=|\\/)+([\\d,a-f]+)/);\n    return t && 5 === t.length ? t[4] : null;\n}\nfunction assurePlaybackState$1(e) {\n    e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? \"play\" : \"pause\"));\n}\nconst vimeo = {\n    setup () {\n        const e = this;\n        toggleClass(e.elements.wrapper, e.config.classNames.embed, !0), e.options.speed = e.config.speed.options, setAspectRatio.call(e), is.object(window.Vimeo) ? vimeo.ready.call(e) : loadScript(e.config.urls.vimeo.sdk).then(()=>{\n            vimeo.ready.call(e);\n        }).catch((t)=>{\n            e.debug.warn(\"Vimeo SDK (player.js) failed to load\", t);\n        });\n    },\n    ready () {\n        const e = this, t = e.config.vimeo, { premium: i, referrerPolicy: s, ...n } = t;\n        let r = e.media.getAttribute(\"src\"), a = \"\";\n        is.empty(r) ? (r = e.media.getAttribute(e.config.attributes.embed.id), a = e.media.getAttribute(e.config.attributes.embed.hash)) : a = parseHash(r);\n        const o = a ? {\n            h: a\n        } : {};\n        i && Object.assign(n, {\n            controls: !1,\n            sidedock: !1\n        });\n        const l = buildUrlParams({\n            loop: e.config.loop.active,\n            autoplay: e.autoplay,\n            muted: e.muted,\n            gesture: \"media\",\n            playsinline: e.config.playsinline,\n            ...o,\n            ...n\n        }), c = parseId$1(r), u = createElement(\"iframe\"), d = format(e.config.urls.vimeo.iframe, c, l);\n        if (u.setAttribute(\"src\", d), u.setAttribute(\"allowfullscreen\", \"\"), u.setAttribute(\"allow\", [\n            \"autoplay\",\n            \"fullscreen\",\n            \"picture-in-picture\",\n            \"encrypted-media\",\n            \"accelerometer\",\n            \"gyroscope\"\n        ].join(\"; \")), is.empty(s) || u.setAttribute(\"referrerPolicy\", s), i || !t.customControls) u.setAttribute(\"data-poster\", e.poster), e.media = replaceElement(u, e.media);\n        else {\n            const t = createElement(\"div\", {\n                class: e.config.classNames.embedContainer,\n                \"data-poster\": e.poster\n            });\n            t.appendChild(u), e.media = replaceElement(t, e.media);\n        }\n        t.customControls || fetch(format(e.config.urls.vimeo.api, d)).then((t)=>{\n            !is.empty(t) && t.thumbnail_url && ui.setPoster.call(e, t.thumbnail_url).catch(()=>{});\n        }), e.embed = new window.Vimeo.Player(u, {\n            autopause: e.config.autopause,\n            muted: e.muted\n        }), e.media.paused = !0, e.media.currentTime = 0, e.supported.ui && e.embed.disableTextTrack(), e.media.play = ()=>(assurePlaybackState$1.call(e, !0), e.embed.play()), e.media.pause = ()=>(assurePlaybackState$1.call(e, !1), e.embed.pause()), e.media.stop = ()=>{\n            e.pause(), e.currentTime = 0;\n        };\n        let { currentTime: h } = e.media;\n        Object.defineProperty(e.media, \"currentTime\", {\n            get: ()=>h,\n            set (t) {\n                const { embed: i, media: s, paused: n, volume: r } = e, a = n && !i.hasPlayed;\n                s.seeking = !0, triggerEvent.call(e, s, \"seeking\"), Promise.resolve(a && i.setVolume(0)).then(()=>i.setCurrentTime(t)).then(()=>a && i.pause()).then(()=>a && i.setVolume(r)).catch(()=>{});\n            }\n        });\n        let m = e.config.speed.selected;\n        Object.defineProperty(e.media, \"playbackRate\", {\n            get: ()=>m,\n            set (t) {\n                e.embed.setPlaybackRate(t).then(()=>{\n                    m = t, triggerEvent.call(e, e.media, \"ratechange\");\n                }).catch(()=>{\n                    e.options.speed = [\n                        1\n                    ];\n                });\n            }\n        });\n        let { volume: p } = e.config;\n        Object.defineProperty(e.media, \"volume\", {\n            get: ()=>p,\n            set (t) {\n                e.embed.setVolume(t).then(()=>{\n                    p = t, triggerEvent.call(e, e.media, \"volumechange\");\n                });\n            }\n        });\n        let { muted: g } = e.config;\n        Object.defineProperty(e.media, \"muted\", {\n            get: ()=>g,\n            set (t) {\n                const i = !!is.boolean(t) && t;\n                e.embed.setMuted(!!i || e.config.muted).then(()=>{\n                    g = i, triggerEvent.call(e, e.media, \"volumechange\");\n                });\n            }\n        });\n        let f, { loop: y } = e.config;\n        Object.defineProperty(e.media, \"loop\", {\n            get: ()=>y,\n            set (t) {\n                const i = is.boolean(t) ? t : e.config.loop.active;\n                e.embed.setLoop(i).then(()=>{\n                    y = i;\n                });\n            }\n        }), e.embed.getVideoUrl().then((t)=>{\n            f = t, controls.setDownloadUrl.call(e);\n        }).catch((e)=>{\n            this.debug.warn(e);\n        }), Object.defineProperty(e.media, \"currentSrc\", {\n            get: ()=>f\n        }), Object.defineProperty(e.media, \"ended\", {\n            get: ()=>e.currentTime === e.duration\n        }), Promise.all([\n            e.embed.getVideoWidth(),\n            e.embed.getVideoHeight()\n        ]).then((t)=>{\n            const [i, s] = t;\n            e.embed.ratio = roundAspectRatio(i, s), setAspectRatio.call(this);\n        }), e.embed.setAutopause(e.config.autopause).then((t)=>{\n            e.config.autopause = t;\n        }), e.embed.getVideoTitle().then((t)=>{\n            e.config.title = t, ui.setTitle.call(this);\n        }), e.embed.getCurrentTime().then((t)=>{\n            h = t, triggerEvent.call(e, e.media, \"timeupdate\");\n        }), e.embed.getDuration().then((t)=>{\n            e.media.duration = t, triggerEvent.call(e, e.media, \"durationchange\");\n        }), e.embed.getTextTracks().then((t)=>{\n            e.media.textTracks = t, captions.setup.call(e);\n        }), e.embed.on(\"cuechange\", ({ cues: t = [] })=>{\n            const i = t.map((e)=>stripHTML(e.text));\n            captions.updateCues.call(e, i);\n        }), e.embed.on(\"loaded\", ()=>{\n            if (e.embed.getPaused().then((t)=>{\n                assurePlaybackState$1.call(e, !t), t || triggerEvent.call(e, e.media, \"playing\");\n            }), is.element(e.embed.element) && e.supported.ui) {\n                e.embed.element.setAttribute(\"tabindex\", -1);\n            }\n        }), e.embed.on(\"bufferstart\", ()=>{\n            triggerEvent.call(e, e.media, \"waiting\");\n        }), e.embed.on(\"bufferend\", ()=>{\n            triggerEvent.call(e, e.media, \"playing\");\n        }), e.embed.on(\"play\", ()=>{\n            assurePlaybackState$1.call(e, !0), triggerEvent.call(e, e.media, \"playing\");\n        }), e.embed.on(\"pause\", ()=>{\n            assurePlaybackState$1.call(e, !1);\n        }), e.embed.on(\"timeupdate\", (t)=>{\n            e.media.seeking = !1, h = t.seconds, triggerEvent.call(e, e.media, \"timeupdate\");\n        }), e.embed.on(\"progress\", (t)=>{\n            e.media.buffered = t.percent, triggerEvent.call(e, e.media, \"progress\"), 1 === parseInt(t.percent, 10) && triggerEvent.call(e, e.media, \"canplaythrough\"), e.embed.getDuration().then((t)=>{\n                t !== e.media.duration && (e.media.duration = t, triggerEvent.call(e, e.media, \"durationchange\"));\n            });\n        }), e.embed.on(\"seeked\", ()=>{\n            e.media.seeking = !1, triggerEvent.call(e, e.media, \"seeked\");\n        }), e.embed.on(\"ended\", ()=>{\n            e.media.paused = !0, triggerEvent.call(e, e.media, \"ended\");\n        }), e.embed.on(\"error\", (t)=>{\n            e.media.error = t, triggerEvent.call(e, e.media, \"error\");\n        }), t.customControls && setTimeout(()=>ui.build.call(e), 0);\n    }\n};\nfunction parseId(e) {\n    if (is.empty(e)) return null;\n    return e.match(/^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/) ? RegExp.$2 : e;\n}\nfunction assurePlaybackState(e) {\n    e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? \"play\" : \"pause\"));\n}\nfunction getHost(e) {\n    return e.noCookie ? \"https://www.youtube-nocookie.com\" : \"http:\" === window.location.protocol ? \"http://www.youtube.com\" : void 0;\n}\nconst youtube = {\n    setup () {\n        if (toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), is.object(window.YT) && is.function(window.YT.Player)) youtube.ready.call(this);\n        else {\n            const e = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = ()=>{\n                is.function(e) && e(), youtube.ready.call(this);\n            }, loadScript(this.config.urls.youtube.sdk).catch((e)=>{\n                this.debug.warn(\"YouTube API failed to load\", e);\n            });\n        }\n    },\n    getTitle (e) {\n        fetch(format(this.config.urls.youtube.api, e)).then((e)=>{\n            if (is.object(e)) {\n                const { title: t, height: i, width: s } = e;\n                this.config.title = t, ui.setTitle.call(this), this.embed.ratio = roundAspectRatio(s, i);\n            }\n            setAspectRatio.call(this);\n        }).catch(()=>{\n            setAspectRatio.call(this);\n        });\n    },\n    ready () {\n        const e = this, t = e.config.youtube, i = e.media && e.media.getAttribute(\"id\");\n        if (!is.empty(i) && i.startsWith(\"youtube-\")) return;\n        let s = e.media.getAttribute(\"src\");\n        is.empty(s) && (s = e.media.getAttribute(this.config.attributes.embed.id));\n        const n = parseId(s), r = createElement(\"div\", {\n            id: generateId(e.provider),\n            \"data-poster\": t.customControls ? e.poster : void 0\n        });\n        if (e.media = replaceElement(r, e.media), t.customControls) {\n            const t = (e)=>`https://i.ytimg.com/vi/${n}/${e}default.jpg`;\n            loadImage(t(\"maxres\"), 121).catch(()=>loadImage(t(\"sd\"), 121)).catch(()=>loadImage(t(\"hq\"))).then((t)=>ui.setPoster.call(e, t.src)).then((t)=>{\n                t.includes(\"maxres\") || (e.elements.poster.style.backgroundSize = \"cover\");\n            }).catch(()=>{});\n        }\n        e.embed = new window.YT.Player(e.media, {\n            videoId: n,\n            host: getHost(t),\n            playerVars: extend({}, {\n                autoplay: e.config.autoplay ? 1 : 0,\n                hl: e.config.hl,\n                controls: e.supported.ui && t.customControls ? 0 : 1,\n                disablekb: 1,\n                playsinline: e.config.playsinline && !e.config.fullscreen.iosNative ? 1 : 0,\n                cc_load_policy: e.captions.active ? 1 : 0,\n                cc_lang_pref: e.config.captions.language,\n                widget_referrer: window ? window.location.href : null\n            }, t),\n            events: {\n                onError (t) {\n                    if (!e.media.error) {\n                        const i = t.data, s = {\n                            2: \"The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.\",\n                            5: \"The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.\",\n                            100: \"The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.\",\n                            101: \"The owner of the requested video does not allow it to be played in embedded players.\",\n                            150: \"The owner of the requested video does not allow it to be played in embedded players.\"\n                        }[i] || \"An unknown error occurred\";\n                        e.media.error = {\n                            code: i,\n                            message: s\n                        }, triggerEvent.call(e, e.media, \"error\");\n                    }\n                },\n                onPlaybackRateChange (t) {\n                    const i = t.target;\n                    e.media.playbackRate = i.getPlaybackRate(), triggerEvent.call(e, e.media, \"ratechange\");\n                },\n                onReady (i) {\n                    if (is.function(e.media.play)) return;\n                    const s = i.target;\n                    youtube.getTitle.call(e, n), e.media.play = ()=>{\n                        assurePlaybackState.call(e, !0), s.playVideo();\n                    }, e.media.pause = ()=>{\n                        assurePlaybackState.call(e, !1), s.pauseVideo();\n                    }, e.media.stop = ()=>{\n                        s.stopVideo();\n                    }, e.media.duration = s.getDuration(), e.media.paused = !0, e.media.currentTime = 0, Object.defineProperty(e.media, \"currentTime\", {\n                        get: ()=>Number(s.getCurrentTime()),\n                        set (t) {\n                            e.paused && !e.embed.hasPlayed && e.embed.mute(), e.media.seeking = !0, triggerEvent.call(e, e.media, \"seeking\"), s.seekTo(t);\n                        }\n                    }), Object.defineProperty(e.media, \"playbackRate\", {\n                        get: ()=>s.getPlaybackRate(),\n                        set (e) {\n                            s.setPlaybackRate(e);\n                        }\n                    });\n                    let { volume: r } = e.config;\n                    Object.defineProperty(e.media, \"volume\", {\n                        get: ()=>r,\n                        set (t) {\n                            r = t, s.setVolume(100 * r), triggerEvent.call(e, e.media, \"volumechange\");\n                        }\n                    });\n                    let { muted: a } = e.config;\n                    Object.defineProperty(e.media, \"muted\", {\n                        get: ()=>a,\n                        set (t) {\n                            const i = is.boolean(t) ? t : a;\n                            a = i, s[i ? \"mute\" : \"unMute\"](), s.setVolume(100 * r), triggerEvent.call(e, e.media, \"volumechange\");\n                        }\n                    }), Object.defineProperty(e.media, \"currentSrc\", {\n                        get: ()=>s.getVideoUrl()\n                    }), Object.defineProperty(e.media, \"ended\", {\n                        get: ()=>e.currentTime === e.duration\n                    });\n                    const o = s.getAvailablePlaybackRates();\n                    e.options.speed = o.filter((t)=>e.config.speed.options.includes(t)), e.supported.ui && t.customControls && e.media.setAttribute(\"tabindex\", -1), triggerEvent.call(e, e.media, \"timeupdate\"), triggerEvent.call(e, e.media, \"durationchange\"), clearInterval(e.timers.buffering), e.timers.buffering = setInterval(()=>{\n                        e.media.buffered = s.getVideoLoadedFraction(), (null === e.media.lastBuffered || e.media.lastBuffered < e.media.buffered) && triggerEvent.call(e, e.media, \"progress\"), e.media.lastBuffered = e.media.buffered, 1 === e.media.buffered && (clearInterval(e.timers.buffering), triggerEvent.call(e, e.media, \"canplaythrough\"));\n                    }, 200), t.customControls && setTimeout(()=>ui.build.call(e), 50);\n                },\n                onStateChange (i) {\n                    const s = i.target;\n                    clearInterval(e.timers.playing);\n                    switch(e.media.seeking && [\n                        1,\n                        2\n                    ].includes(i.data) && (e.media.seeking = !1, triggerEvent.call(e, e.media, \"seeked\")), i.data){\n                        case -1:\n                            triggerEvent.call(e, e.media, \"timeupdate\"), e.media.buffered = s.getVideoLoadedFraction(), triggerEvent.call(e, e.media, \"progress\");\n                            break;\n                        case 0:\n                            assurePlaybackState.call(e, !1), e.media.loop ? (s.stopVideo(), s.playVideo()) : triggerEvent.call(e, e.media, \"ended\");\n                            break;\n                        case 1:\n                            t.customControls && !e.config.autoplay && e.media.paused && !e.embed.hasPlayed ? e.media.pause() : (assurePlaybackState.call(e, !0), triggerEvent.call(e, e.media, \"playing\"), e.timers.playing = setInterval(()=>{\n                                triggerEvent.call(e, e.media, \"timeupdate\");\n                            }, 50), e.media.duration !== s.getDuration() && (e.media.duration = s.getDuration(), triggerEvent.call(e, e.media, \"durationchange\")));\n                            break;\n                        case 2:\n                            e.muted || e.embed.unMute(), assurePlaybackState.call(e, !1);\n                            break;\n                        case 3:\n                            triggerEvent.call(e, e.media, \"waiting\");\n                    }\n                    triggerEvent.call(e, e.elements.container, \"statechange\", !1, {\n                        code: i.data\n                    });\n                }\n            }\n        });\n    }\n}, media = {\n    setup () {\n        this.media ? (toggleClass(this.elements.container, this.config.classNames.type.replace(\"{0}\", this.type), !0), toggleClass(this.elements.container, this.config.classNames.provider.replace(\"{0}\", this.provider), !0), this.isEmbed && toggleClass(this.elements.container, this.config.classNames.type.replace(\"{0}\", \"video\"), !0), this.isVideo && (this.elements.wrapper = createElement(\"div\", {\n            class: this.config.classNames.video\n        }), wrap(this.media, this.elements.wrapper), this.elements.poster = createElement(\"div\", {\n            class: this.config.classNames.poster\n        }), this.elements.wrapper.appendChild(this.elements.poster)), this.isHTML5 ? html5.setup.call(this) : this.isYouTube ? youtube.setup.call(this) : this.isVimeo && vimeo.setup.call(this)) : this.debug.warn(\"No media element found!\");\n    }\n}, destroy = (e)=>{\n    e.manager && e.manager.destroy(), e.elements.displayContainer && e.elements.displayContainer.destroy(), e.elements.container.remove();\n};\nclass Ads {\n    constructor(e){\n        _defineProperty$1(this, \"load\", ()=>{\n            this.enabled && (is.object(window.google) && is.object(window.google.ima) ? this.ready() : loadScript(this.player.config.urls.googleIMA.sdk).then(()=>{\n                this.ready();\n            }).catch(()=>{\n                this.trigger(\"error\", new Error(\"Google IMA SDK failed to load\"));\n            }));\n        }), _defineProperty$1(this, \"ready\", ()=>{\n            var e;\n            this.enabled || ((e = this).manager && e.manager.destroy(), e.elements.displayContainer && e.elements.displayContainer.destroy(), e.elements.container.remove()), this.startSafetyTimer(12e3, \"ready()\"), this.managerPromise.then(()=>{\n                this.clearSafetyTimer(\"onAdsManagerLoaded()\");\n            }), this.listeners(), this.setupIMA();\n        }), _defineProperty$1(this, \"setupIMA\", ()=>{\n            this.elements.container = createElement(\"div\", {\n                class: this.player.config.classNames.ads\n            }), this.player.elements.container.appendChild(this.elements.container), google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED), google.ima.settings.setLocale(this.player.config.ads.language), google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline), this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container, this.player.media), this.loader = new google.ima.AdsLoader(this.elements.displayContainer), this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, (e)=>this.onAdsManagerLoaded(e), !1), this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, (e)=>this.onAdError(e), !1), this.requestAds();\n        }), _defineProperty$1(this, \"requestAds\", ()=>{\n            const { container: e } = this.player.elements;\n            try {\n                const t = new google.ima.AdsRequest;\n                t.adTagUrl = this.tagUrl, t.linearAdSlotWidth = e.offsetWidth, t.linearAdSlotHeight = e.offsetHeight, t.nonLinearAdSlotWidth = e.offsetWidth, t.nonLinearAdSlotHeight = e.offsetHeight, t.forceNonLinearFullSlot = !1, t.setAdWillPlayMuted(!this.player.muted), this.loader.requestAds(t);\n            } catch (e) {\n                this.onAdError(e);\n            }\n        }), _defineProperty$1(this, \"pollCountdown\", (e = !1)=>{\n            if (!e) return clearInterval(this.countdownTimer), void this.elements.container.removeAttribute(\"data-badge-text\");\n            this.countdownTimer = setInterval(()=>{\n                const e = formatTime(Math.max(this.manager.getRemainingTime(), 0)), t = `${i18n.get(\"advertisement\", this.player.config)} - ${e}`;\n                this.elements.container.setAttribute(\"data-badge-text\", t);\n            }, 100);\n        }), _defineProperty$1(this, \"onAdsManagerLoaded\", (e)=>{\n            if (!this.enabled) return;\n            const t = new google.ima.AdsRenderingSettings;\n            t.restoreCustomPlaybackStateOnAdBreakComplete = !0, t.enablePreloading = !0, this.manager = e.getAdsManager(this.player, t), this.cuePoints = this.manager.getCuePoints(), this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, (e)=>this.onAdError(e)), Object.keys(google.ima.AdEvent.Type).forEach((e)=>{\n                this.manager.addEventListener(google.ima.AdEvent.Type[e], (e)=>this.onAdEvent(e));\n            }), this.trigger(\"loaded\");\n        }), _defineProperty$1(this, \"addCuePoints\", ()=>{\n            is.empty(this.cuePoints) || this.cuePoints.forEach((e)=>{\n                if (0 !== e && -1 !== e && e < this.player.duration) {\n                    const t = this.player.elements.progress;\n                    if (is.element(t)) {\n                        const i = 100 / this.player.duration * e, s = createElement(\"span\", {\n                            class: this.player.config.classNames.cues\n                        });\n                        s.style.left = `${i.toString()}%`, t.appendChild(s);\n                    }\n                }\n            });\n        }), _defineProperty$1(this, \"onAdEvent\", (e)=>{\n            const { container: t } = this.player.elements, i = e.getAd(), s = e.getAdData();\n            switch(((e)=>{\n                triggerEvent.call(this.player, this.player.media, `ads${e.replace(/_/g, \"\").toLowerCase()}`);\n            })(e.type), e.type){\n                case google.ima.AdEvent.Type.LOADED:\n                    this.trigger(\"loaded\"), this.pollCountdown(!0), i.isLinear() || (i.width = t.offsetWidth, i.height = t.offsetHeight);\n                    break;\n                case google.ima.AdEvent.Type.STARTED:\n                    this.manager.setVolume(this.player.volume);\n                    break;\n                case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                    this.player.ended ? this.loadAds() : this.loader.contentComplete();\n                    break;\n                case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                    this.pauseContent();\n                    break;\n                case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                    this.pollCountdown(), this.resumeContent();\n                    break;\n                case google.ima.AdEvent.Type.LOG:\n                    s.adError && this.player.debug.warn(`Non-fatal ad error: ${s.adError.getMessage()}`);\n            }\n        }), _defineProperty$1(this, \"onAdError\", (e)=>{\n            this.cancel(), this.player.debug.warn(\"Ads error\", e);\n        }), _defineProperty$1(this, \"listeners\", ()=>{\n            const { container: e } = this.player.elements;\n            let t;\n            this.player.on(\"canplay\", ()=>{\n                this.addCuePoints();\n            }), this.player.on(\"ended\", ()=>{\n                this.loader.contentComplete();\n            }), this.player.on(\"timeupdate\", ()=>{\n                t = this.player.currentTime;\n            }), this.player.on(\"seeked\", ()=>{\n                const e = this.player.currentTime;\n                is.empty(this.cuePoints) || this.cuePoints.forEach((i, s)=>{\n                    t < i && i < e && (this.manager.discardAdBreak(), this.cuePoints.splice(s, 1));\n                });\n            }), window.addEventListener(\"resize\", ()=>{\n                this.manager && this.manager.resize(e.offsetWidth, e.offsetHeight, google.ima.ViewMode.NORMAL);\n            });\n        }), _defineProperty$1(this, \"play\", ()=>{\n            const { container: e } = this.player.elements;\n            this.managerPromise || this.resumeContent(), this.managerPromise.then(()=>{\n                this.manager.setVolume(this.player.volume), this.elements.displayContainer.initialize();\n                try {\n                    this.initialized || (this.manager.init(e.offsetWidth, e.offsetHeight, google.ima.ViewMode.NORMAL), this.manager.start()), this.initialized = !0;\n                } catch (e) {\n                    this.onAdError(e);\n                }\n            }).catch(()=>{});\n        }), _defineProperty$1(this, \"resumeContent\", ()=>{\n            this.elements.container.style.zIndex = \"\", this.playing = !1, silencePromise(this.player.media.play());\n        }), _defineProperty$1(this, \"pauseContent\", ()=>{\n            this.elements.container.style.zIndex = 3, this.playing = !0, this.player.media.pause();\n        }), _defineProperty$1(this, \"cancel\", ()=>{\n            this.initialized && this.resumeContent(), this.trigger(\"error\"), this.loadAds();\n        }), _defineProperty$1(this, \"loadAds\", ()=>{\n            this.managerPromise.then(()=>{\n                this.manager && this.manager.destroy(), this.managerPromise = new Promise((e)=>{\n                    this.on(\"loaded\", e), this.player.debug.log(this.manager);\n                }), this.initialized = !1, this.requestAds();\n            }).catch(()=>{});\n        }), _defineProperty$1(this, \"trigger\", (e, ...t)=>{\n            const i = this.events[e];\n            is.array(i) && i.forEach((e)=>{\n                is.function(e) && e.apply(this, t);\n            });\n        }), _defineProperty$1(this, \"on\", (e, t)=>(is.array(this.events[e]) || (this.events[e] = []), this.events[e].push(t), this)), _defineProperty$1(this, \"startSafetyTimer\", (e, t)=>{\n            this.player.debug.log(`Safety timer invoked from: ${t}`), this.safetyTimer = setTimeout(()=>{\n                this.cancel(), this.clearSafetyTimer(\"startSafetyTimer()\");\n            }, e);\n        }), _defineProperty$1(this, \"clearSafetyTimer\", (e)=>{\n            is.nullOrUndefined(this.safetyTimer) || (this.player.debug.log(`Safety timer cleared from: ${e}`), clearTimeout(this.safetyTimer), this.safetyTimer = null);\n        }), this.player = e, this.config = e.config.ads, this.playing = !1, this.initialized = !1, this.elements = {\n            container: null,\n            displayContainer: null\n        }, this.manager = null, this.loader = null, this.cuePoints = null, this.events = {}, this.safetyTimer = null, this.countdownTimer = null, this.managerPromise = new Promise((e, t)=>{\n            this.on(\"loaded\", e), this.on(\"error\", t);\n        }), this.load();\n    }\n    get enabled() {\n        const { config: e } = this;\n        return this.player.isHTML5 && this.player.isVideo && e.enabled && (!is.empty(e.publisherId) || is.url(e.tagUrl));\n    }\n    get tagUrl() {\n        const { config: e } = this;\n        if (is.url(e.tagUrl)) return e.tagUrl;\n        return `https://go.aniview.com/api/adserver6/vast/?${buildUrlParams({\n            AV_PUBLISHERID: \"58c25bb0073ef448b1087ad6\",\n            AV_CHANNELID: \"5a0458dc28a06145e4519d21\",\n            AV_URL: window.location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: e.publisherId\n        })}`;\n    }\n}\nfunction clamp(e = 0, t = 0, i = 255) {\n    return Math.min(Math.max(e, t), i);\n}\nconst parseVtt = (e)=>{\n    const t = [];\n    return e.split(/\\r\\n\\r\\n|\\n\\n|\\r\\r/).forEach((e)=>{\n        const i = {};\n        e.split(/\\r\\n|\\n|\\r/).forEach((e)=>{\n            if (is.number(i.startTime)) {\n                if (!is.empty(e.trim()) && is.empty(i.text)) {\n                    const t = e.trim().split(\"#xywh=\");\n                    [i.text] = t, t[1] && ([i.x, i.y, i.w, i.h] = t[1].split(\",\"));\n                }\n            } else {\n                const t = e.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/);\n                t && (i.startTime = 60 * Number(t[1] || 0) * 60 + 60 * Number(t[2]) + Number(t[3]) + Number(`0.${t[4]}`), i.endTime = 60 * Number(t[6] || 0) * 60 + 60 * Number(t[7]) + Number(t[8]) + Number(`0.${t[9]}`));\n            }\n        }), i.text && t.push(i);\n    }), t;\n}, fitRatio = (e, t)=>{\n    const i = {};\n    return e > t.width / t.height ? (i.width = t.width, i.height = 1 / e * t.width) : (i.height = t.height, i.width = e * t.height), i;\n};\nclass PreviewThumbnails {\n    constructor(e){\n        _defineProperty$1(this, \"load\", ()=>{\n            this.player.elements.display.seekTooltip && (this.player.elements.display.seekTooltip.hidden = this.enabled), this.enabled && this.getThumbnails().then(()=>{\n                this.enabled && (this.render(), this.determineContainerAutoSizing(), this.listeners(), this.loaded = !0);\n            });\n        }), _defineProperty$1(this, \"getThumbnails\", ()=>new Promise((e)=>{\n                const { src: t } = this.player.config.previewThumbnails;\n                if (is.empty(t)) throw new Error(\"Missing previewThumbnails.src config attribute\");\n                const i = ()=>{\n                    this.thumbnails.sort((e, t)=>e.height - t.height), this.player.debug.log(\"Preview thumbnails\", this.thumbnails), e();\n                };\n                if (is.function(t)) t((e)=>{\n                    this.thumbnails = e, i();\n                });\n                else {\n                    const e = (is.string(t) ? [\n                        t\n                    ] : t).map((e)=>this.getThumbnail(e));\n                    Promise.all(e).then(i);\n                }\n            })), _defineProperty$1(this, \"getThumbnail\", (e)=>new Promise((t)=>{\n                fetch(e).then((i)=>{\n                    const s = {\n                        frames: parseVtt(i),\n                        height: null,\n                        urlPrefix: \"\"\n                    };\n                    s.frames[0].text.startsWith(\"/\") || s.frames[0].text.startsWith(\"http://\") || s.frames[0].text.startsWith(\"https://\") || (s.urlPrefix = e.substring(0, e.lastIndexOf(\"/\") + 1));\n                    const n = new Image;\n                    n.onload = ()=>{\n                        s.height = n.naturalHeight, s.width = n.naturalWidth, this.thumbnails.push(s), t();\n                    }, n.src = s.urlPrefix + s.frames[0].text;\n                });\n            })), _defineProperty$1(this, \"startMove\", (e)=>{\n            if (this.loaded && is.event(e) && [\n                \"touchmove\",\n                \"mousemove\"\n            ].includes(e.type) && this.player.media.duration) {\n                if (\"touchmove\" === e.type) this.seekTime = this.player.media.duration * (this.player.elements.inputs.seek.value / 100);\n                else {\n                    var t, i;\n                    const s = this.player.elements.progress.getBoundingClientRect(), n = 100 / s.width * (e.pageX - s.left);\n                    this.seekTime = this.player.media.duration * (n / 100), this.seekTime < 0 && (this.seekTime = 0), this.seekTime > this.player.media.duration - 1 && (this.seekTime = this.player.media.duration - 1), this.mousePosX = e.pageX, this.elements.thumb.time.innerText = formatTime(this.seekTime);\n                    const r = null === (t = this.player.config.markers) || void 0 === t || null === (i = t.points) || void 0 === i ? void 0 : i.find(({ time: e })=>e === Math.round(this.seekTime));\n                    r && this.elements.thumb.time.insertAdjacentHTML(\"afterbegin\", `${r.label}<br>`);\n                }\n                this.showImageAtCurrentTime();\n            }\n        }), _defineProperty$1(this, \"endMove\", ()=>{\n            this.toggleThumbContainer(!1, !0);\n        }), _defineProperty$1(this, \"startScrubbing\", (e)=>{\n            (is.nullOrUndefined(e.button) || !1 === e.button || 0 === e.button) && (this.mouseDown = !0, this.player.media.duration && (this.toggleScrubbingContainer(!0), this.toggleThumbContainer(!1, !0), this.showImageAtCurrentTime()));\n        }), _defineProperty$1(this, \"endScrubbing\", ()=>{\n            this.mouseDown = !1, Math.ceil(this.lastTime) === Math.ceil(this.player.media.currentTime) ? this.toggleScrubbingContainer(!1) : once.call(this.player, this.player.media, \"timeupdate\", ()=>{\n                this.mouseDown || this.toggleScrubbingContainer(!1);\n            });\n        }), _defineProperty$1(this, \"listeners\", ()=>{\n            this.player.on(\"play\", ()=>{\n                this.toggleThumbContainer(!1, !0);\n            }), this.player.on(\"seeked\", ()=>{\n                this.toggleThumbContainer(!1);\n            }), this.player.on(\"timeupdate\", ()=>{\n                this.lastTime = this.player.media.currentTime;\n            });\n        }), _defineProperty$1(this, \"render\", ()=>{\n            this.elements.thumb.container = createElement(\"div\", {\n                class: this.player.config.classNames.previewThumbnails.thumbContainer\n            }), this.elements.thumb.imageContainer = createElement(\"div\", {\n                class: this.player.config.classNames.previewThumbnails.imageContainer\n            }), this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer);\n            const e = createElement(\"div\", {\n                class: this.player.config.classNames.previewThumbnails.timeContainer\n            });\n            this.elements.thumb.time = createElement(\"span\", {}, \"00:00\"), e.appendChild(this.elements.thumb.time), this.elements.thumb.imageContainer.appendChild(e), is.element(this.player.elements.progress) && this.player.elements.progress.appendChild(this.elements.thumb.container), this.elements.scrubbing.container = createElement(\"div\", {\n                class: this.player.config.classNames.previewThumbnails.scrubbingContainer\n            }), this.player.elements.wrapper.appendChild(this.elements.scrubbing.container);\n        }), _defineProperty$1(this, \"destroy\", ()=>{\n            this.elements.thumb.container && this.elements.thumb.container.remove(), this.elements.scrubbing.container && this.elements.scrubbing.container.remove();\n        }), _defineProperty$1(this, \"showImageAtCurrentTime\", ()=>{\n            this.mouseDown ? this.setScrubbingContainerSize() : this.setThumbContainerSizeAndPos();\n            const e = this.thumbnails[0].frames.findIndex((e)=>this.seekTime >= e.startTime && this.seekTime <= e.endTime), t = e >= 0;\n            let i = 0;\n            this.mouseDown || this.toggleThumbContainer(t), t && (this.thumbnails.forEach((t, s)=>{\n                this.loadedImages.includes(t.frames[e].text) && (i = s);\n            }), e !== this.showingThumb && (this.showingThumb = e, this.loadImage(i)));\n        }), _defineProperty$1(this, \"loadImage\", (e = 0)=>{\n            const t = this.showingThumb, i = this.thumbnails[e], { urlPrefix: s } = i, n = i.frames[t], r = i.frames[t].text, a = s + r;\n            if (this.currentImageElement && this.currentImageElement.dataset.filename === r) this.showImage(this.currentImageElement, n, e, t, r, !1), this.currentImageElement.dataset.index = t, this.removeOldImages(this.currentImageElement);\n            else {\n                this.loadingImage && this.usingSprites && (this.loadingImage.onload = null);\n                const i = new Image;\n                i.src = a, i.dataset.index = t, i.dataset.filename = r, this.showingThumbFilename = r, this.player.debug.log(`Loading image: ${a}`), i.onload = ()=>this.showImage(i, n, e, t, r, !0), this.loadingImage = i, this.removeOldImages(i);\n            }\n        }), _defineProperty$1(this, \"showImage\", (e, t, i, s, n, r = !0)=>{\n            this.player.debug.log(`Showing thumb: ${n}. num: ${s}. qual: ${i}. newimg: ${r}`), this.setImageSizeAndOffset(e, t), r && (this.currentImageContainer.appendChild(e), this.currentImageElement = e, this.loadedImages.includes(n) || this.loadedImages.push(n)), this.preloadNearby(s, !0).then(this.preloadNearby(s, !1)).then(this.getHigherQuality(i, e, t, n));\n        }), _defineProperty$1(this, \"removeOldImages\", (e)=>{\n            Array.from(this.currentImageContainer.children).forEach((t)=>{\n                if (\"img\" !== t.tagName.toLowerCase()) return;\n                const i = this.usingSprites ? 500 : 1e3;\n                if (t.dataset.index !== e.dataset.index && !t.dataset.deleting) {\n                    t.dataset.deleting = !0;\n                    const { currentImageContainer: e } = this;\n                    setTimeout(()=>{\n                        e.removeChild(t), this.player.debug.log(`Removing thumb: ${t.dataset.filename}`);\n                    }, i);\n                }\n            });\n        }), _defineProperty$1(this, \"preloadNearby\", (e, t = !0)=>new Promise((i)=>{\n                setTimeout(()=>{\n                    const s = this.thumbnails[0].frames[e].text;\n                    if (this.showingThumbFilename === s) {\n                        let n;\n                        n = t ? this.thumbnails[0].frames.slice(e) : this.thumbnails[0].frames.slice(0, e).reverse();\n                        let r = !1;\n                        n.forEach((e)=>{\n                            const t = e.text;\n                            if (t !== s && !this.loadedImages.includes(t)) {\n                                r = !0, this.player.debug.log(`Preloading thumb filename: ${t}`);\n                                const { urlPrefix: e } = this.thumbnails[0], s = e + t, n = new Image;\n                                n.src = s, n.onload = ()=>{\n                                    this.player.debug.log(`Preloaded thumb filename: ${t}`), this.loadedImages.includes(t) || this.loadedImages.push(t), i();\n                                };\n                            }\n                        }), r || i();\n                    }\n                }, 300);\n            })), _defineProperty$1(this, \"getHigherQuality\", (e, t, i, s)=>{\n            if (e < this.thumbnails.length - 1) {\n                let n = t.naturalHeight;\n                this.usingSprites && (n = i.h), n < this.thumbContainerHeight && setTimeout(()=>{\n                    this.showingThumbFilename === s && (this.player.debug.log(`Showing higher quality thumb for: ${s}`), this.loadImage(e + 1));\n                }, 300);\n            }\n        }), _defineProperty$1(this, \"toggleThumbContainer\", (e = !1, t = !1)=>{\n            const i = this.player.config.classNames.previewThumbnails.thumbContainerShown;\n            this.elements.thumb.container.classList.toggle(i, e), !e && t && (this.showingThumb = null, this.showingThumbFilename = null);\n        }), _defineProperty$1(this, \"toggleScrubbingContainer\", (e = !1)=>{\n            const t = this.player.config.classNames.previewThumbnails.scrubbingContainerShown;\n            this.elements.scrubbing.container.classList.toggle(t, e), e || (this.showingThumb = null, this.showingThumbFilename = null);\n        }), _defineProperty$1(this, \"determineContainerAutoSizing\", ()=>{\n            (this.elements.thumb.imageContainer.clientHeight > 20 || this.elements.thumb.imageContainer.clientWidth > 20) && (this.sizeSpecifiedInCSS = !0);\n        }), _defineProperty$1(this, \"setThumbContainerSizeAndPos\", ()=>{\n            const { imageContainer: e } = this.elements.thumb;\n            if (this.sizeSpecifiedInCSS) {\n                if (e.clientHeight > 20 && e.clientWidth < 20) {\n                    const t = Math.floor(e.clientHeight * this.thumbAspectRatio);\n                    e.style.width = `${t}px`;\n                } else if (e.clientHeight < 20 && e.clientWidth > 20) {\n                    const t = Math.floor(e.clientWidth / this.thumbAspectRatio);\n                    e.style.height = `${t}px`;\n                }\n            } else {\n                const t = Math.floor(this.thumbContainerHeight * this.thumbAspectRatio);\n                e.style.height = `${this.thumbContainerHeight}px`, e.style.width = `${t}px`;\n            }\n            this.setThumbContainerPos();\n        }), _defineProperty$1(this, \"setThumbContainerPos\", ()=>{\n            const e = this.player.elements.progress.getBoundingClientRect(), t = this.player.elements.container.getBoundingClientRect(), { container: i } = this.elements.thumb, s = t.left - e.left + 10, n = t.right - e.left - i.clientWidth - 10, r = this.mousePosX - e.left - i.clientWidth / 2, a = clamp(r, s, n);\n            i.style.left = `${a}px`, i.style.setProperty(\"--preview-arrow-offset\", r - a + \"px\");\n        }), _defineProperty$1(this, \"setScrubbingContainerSize\", ()=>{\n            const { width: e, height: t } = fitRatio(this.thumbAspectRatio, {\n                width: this.player.media.clientWidth,\n                height: this.player.media.clientHeight\n            });\n            this.elements.scrubbing.container.style.width = `${e}px`, this.elements.scrubbing.container.style.height = `${t}px`;\n        }), _defineProperty$1(this, \"setImageSizeAndOffset\", (e, t)=>{\n            if (!this.usingSprites) return;\n            const i = this.thumbContainerHeight / t.h;\n            e.style.height = e.naturalHeight * i + \"px\", e.style.width = e.naturalWidth * i + \"px\", e.style.left = `-${t.x * i}px`, e.style.top = `-${t.y * i}px`;\n        }), this.player = e, this.thumbnails = [], this.loaded = !1, this.lastMouseMoveTime = Date.now(), this.mouseDown = !1, this.loadedImages = [], this.elements = {\n            thumb: {},\n            scrubbing: {}\n        }, this.load();\n    }\n    get enabled() {\n        return this.player.isHTML5 && this.player.isVideo && this.player.config.previewThumbnails.enabled;\n    }\n    get currentImageContainer() {\n        return this.mouseDown ? this.elements.scrubbing.container : this.elements.thumb.imageContainer;\n    }\n    get usingSprites() {\n        return Object.keys(this.thumbnails[0].frames[0]).includes(\"w\");\n    }\n    get thumbAspectRatio() {\n        return this.usingSprites ? this.thumbnails[0].frames[0].w / this.thumbnails[0].frames[0].h : this.thumbnails[0].width / this.thumbnails[0].height;\n    }\n    get thumbContainerHeight() {\n        if (this.mouseDown) {\n            const { height: e } = fitRatio(this.thumbAspectRatio, {\n                width: this.player.media.clientWidth,\n                height: this.player.media.clientHeight\n            });\n            return e;\n        }\n        return this.sizeSpecifiedInCSS ? this.elements.thumb.imageContainer.clientHeight : Math.floor(this.player.media.clientWidth / this.thumbAspectRatio / 4);\n    }\n    get currentImageElement() {\n        return this.mouseDown ? this.currentScrubbingImageElement : this.currentThumbnailImageElement;\n    }\n    set currentImageElement(e) {\n        this.mouseDown ? this.currentScrubbingImageElement = e : this.currentThumbnailImageElement = e;\n    }\n}\nconst source = {\n    insertElements (e, t) {\n        is.string(t) ? insertElement(e, this.media, {\n            src: t\n        }) : is.array(t) && t.forEach((t)=>{\n            insertElement(e, this.media, t);\n        });\n    },\n    change (e) {\n        getDeep(e, \"sources.length\") ? (html5.cancelRequests.call(this), this.destroy.call(this, ()=>{\n            this.options.quality = [], removeElement(this.media), this.media = null, is.element(this.elements.container) && this.elements.container.removeAttribute(\"class\");\n            const { sources: t, type: i } = e, [{ provider: s = providers.html5, src: n }] = t, r = \"html5\" === s ? i : \"div\", a = \"html5\" === s ? {} : {\n                src: n\n            };\n            Object.assign(this, {\n                provider: s,\n                type: i,\n                supported: support.check(i, s, this.config.playsinline),\n                media: createElement(r, a)\n            }), this.elements.container.appendChild(this.media), is.boolean(e.autoplay) && (this.config.autoplay = e.autoplay), this.isHTML5 && (this.config.crossorigin && this.media.setAttribute(\"crossorigin\", \"\"), this.config.autoplay && this.media.setAttribute(\"autoplay\", \"\"), is.empty(e.poster) || (this.poster = e.poster), this.config.loop.active && this.media.setAttribute(\"loop\", \"\"), this.config.muted && this.media.setAttribute(\"muted\", \"\"), this.config.playsinline && this.media.setAttribute(\"playsinline\", \"\")), ui.addStyleHook.call(this), this.isHTML5 && source.insertElements.call(this, \"source\", t), this.config.title = e.title, media.setup.call(this), this.isHTML5 && Object.keys(e).includes(\"tracks\") && source.insertElements.call(this, \"track\", e.tracks), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.isHTML5 && this.media.load(), is.empty(e.previewThumbnails) || (Object.assign(this.config.previewThumbnails, e.previewThumbnails), this.previewThumbnails && this.previewThumbnails.loaded && (this.previewThumbnails.destroy(), this.previewThumbnails = null), this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))), this.fullscreen.update();\n        }, !0)) : this.debug.warn(\"Invalid source format\");\n    }\n};\nclass Plyr {\n    constructor(e, t){\n        if (_defineProperty$1(this, \"play\", ()=>is.function(this.media.play) ? (this.ads && this.ads.enabled && this.ads.managerPromise.then(()=>this.ads.play()).catch(()=>silencePromise(this.media.play())), this.media.play()) : null), _defineProperty$1(this, \"pause\", ()=>this.playing && is.function(this.media.pause) ? this.media.pause() : null), _defineProperty$1(this, \"togglePlay\", (e)=>(is.boolean(e) ? e : !this.playing) ? this.play() : this.pause()), _defineProperty$1(this, \"stop\", ()=>{\n            this.isHTML5 ? (this.pause(), this.restart()) : is.function(this.media.stop) && this.media.stop();\n        }), _defineProperty$1(this, \"restart\", ()=>{\n            this.currentTime = 0;\n        }), _defineProperty$1(this, \"rewind\", (e)=>{\n            this.currentTime -= is.number(e) ? e : this.config.seekTime;\n        }), _defineProperty$1(this, \"forward\", (e)=>{\n            this.currentTime += is.number(e) ? e : this.config.seekTime;\n        }), _defineProperty$1(this, \"increaseVolume\", (e)=>{\n            const t = this.media.muted ? 0 : this.volume;\n            this.volume = t + (is.number(e) ? e : 0);\n        }), _defineProperty$1(this, \"decreaseVolume\", (e)=>{\n            this.increaseVolume(-e);\n        }), _defineProperty$1(this, \"airplay\", ()=>{\n            support.airplay && this.media.webkitShowPlaybackTargetPicker();\n        }), _defineProperty$1(this, \"toggleControls\", (e)=>{\n            if (this.supported.ui && !this.isAudio) {\n                const t = hasClass(this.elements.container, this.config.classNames.hideControls), i = void 0 === e ? void 0 : !e, s = toggleClass(this.elements.container, this.config.classNames.hideControls, i);\n                if (s && is.array(this.config.controls) && this.config.controls.includes(\"settings\") && !is.empty(this.config.settings) && controls.toggleMenu.call(this, !1), s !== t) {\n                    const e = s ? \"controlshidden\" : \"controlsshown\";\n                    triggerEvent.call(this, this.media, e);\n                }\n                return !s;\n            }\n            return !1;\n        }), _defineProperty$1(this, \"on\", (e, t)=>{\n            on.call(this, this.elements.container, e, t);\n        }), _defineProperty$1(this, \"once\", (e, t)=>{\n            once.call(this, this.elements.container, e, t);\n        }), _defineProperty$1(this, \"off\", (e, t)=>{\n            off(this.elements.container, e, t);\n        }), _defineProperty$1(this, \"destroy\", (e, t = !1)=>{\n            if (!this.ready) return;\n            const i = ()=>{\n                document.body.style.overflow = \"\", this.embed = null, t ? (Object.keys(this.elements).length && (removeElement(this.elements.buttons.play), removeElement(this.elements.captions), removeElement(this.elements.controls), removeElement(this.elements.wrapper), this.elements.buttons.play = null, this.elements.captions = null, this.elements.controls = null, this.elements.wrapper = null), is.function(e) && e()) : (unbindListeners.call(this), html5.cancelRequests.call(this), replaceElement(this.elements.original, this.elements.container), triggerEvent.call(this, this.elements.original, \"destroyed\", !0), is.function(e) && e.call(this.elements.original), this.ready = !1, setTimeout(()=>{\n                    this.elements = null, this.media = null;\n                }, 200));\n            };\n            this.stop(), clearTimeout(this.timers.loading), clearTimeout(this.timers.controls), clearTimeout(this.timers.resized), this.isHTML5 ? (ui.toggleNativeControls.call(this, !0), i()) : this.isYouTube ? (clearInterval(this.timers.buffering), clearInterval(this.timers.playing), null !== this.embed && is.function(this.embed.destroy) && this.embed.destroy(), i()) : this.isVimeo && (null !== this.embed && this.embed.unload().then(i), setTimeout(i, 200));\n        }), _defineProperty$1(this, \"supports\", (e)=>support.mime.call(this, e)), this.timers = {}, this.ready = !1, this.loading = !1, this.failed = !1, this.touch = support.touch, this.media = e, is.string(this.media) && (this.media = document.querySelectorAll(this.media)), (window.jQuery && this.media instanceof jQuery || is.nodeList(this.media) || is.array(this.media)) && (this.media = this.media[0]), this.config = extend({}, defaults, Plyr.defaults, t || {}, (()=>{\n            try {\n                return JSON.parse(this.media.getAttribute(\"data-plyr-config\"));\n            } catch (e) {\n                return {};\n            }\n        })()), this.elements = {\n            container: null,\n            fullscreen: null,\n            captions: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                popup: null,\n                menu: null,\n                panels: {},\n                buttons: {}\n            }\n        }, this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap\n        }, this.fullscreen = {\n            active: !1\n        }, this.options = {\n            speed: [],\n            quality: []\n        }, this.debug = new Console(this.config.debug), this.debug.log(\"Config\", this.config), this.debug.log(\"Support\", support), is.nullOrUndefined(this.media) || !is.element(this.media)) return void this.debug.error(\"Setup failed: no suitable element passed\");\n        if (this.media.plyr) return void this.debug.warn(\"Target already setup\");\n        if (!this.config.enabled) return void this.debug.error(\"Setup failed: disabled by config\");\n        if (!support.check().api) return void this.debug.error(\"Setup failed: no support\");\n        const i = this.media.cloneNode(!0);\n        i.autoplay = !1, this.elements.original = i;\n        const s = this.media.tagName.toLowerCase();\n        let n = null, r = null;\n        switch(s){\n            case \"div\":\n                if (n = this.media.querySelector(\"iframe\"), is.element(n)) {\n                    if (r = parseUrl(n.getAttribute(\"src\")), this.provider = getProviderByUrl(r.toString()), this.elements.container = this.media, this.media = n, this.elements.container.className = \"\", r.search.length) {\n                        const e = [\n                            \"1\",\n                            \"true\"\n                        ];\n                        e.includes(r.searchParams.get(\"autoplay\")) && (this.config.autoplay = !0), e.includes(r.searchParams.get(\"loop\")) && (this.config.loop.active = !0), this.isYouTube ? (this.config.playsinline = e.includes(r.searchParams.get(\"playsinline\")), this.config.youtube.hl = r.searchParams.get(\"hl\")) : this.config.playsinline = !0;\n                    }\n                } else this.provider = this.media.getAttribute(this.config.attributes.embed.provider), this.media.removeAttribute(this.config.attributes.embed.provider);\n                if (is.empty(this.provider) || !Object.values(providers).includes(this.provider)) return void this.debug.error(\"Setup failed: Invalid provider\");\n                this.type = types.video;\n                break;\n            case \"video\":\n            case \"audio\":\n                this.type = s, this.provider = providers.html5, this.media.hasAttribute(\"crossorigin\") && (this.config.crossorigin = !0), this.media.hasAttribute(\"autoplay\") && (this.config.autoplay = !0), (this.media.hasAttribute(\"playsinline\") || this.media.hasAttribute(\"webkit-playsinline\")) && (this.config.playsinline = !0), this.media.hasAttribute(\"muted\") && (this.config.muted = !0), this.media.hasAttribute(\"loop\") && (this.config.loop.active = !0);\n                break;\n            default:\n                return void this.debug.error(\"Setup failed: unsupported type\");\n        }\n        this.supported = support.check(this.type, this.provider), this.supported.api ? (this.eventListeners = [], this.listeners = new Listeners(this), this.storage = new Storage(this), this.media.plyr = this, is.element(this.elements.container) || (this.elements.container = createElement(\"div\"), wrap(this.media, this.elements.container)), ui.migrateStyles.call(this), ui.addStyleHook.call(this), media.setup.call(this), this.config.debug && on.call(this, this.elements.container, this.config.events.join(\" \"), (e)=>{\n            this.debug.log(`event: ${e.type}`);\n        }), this.fullscreen = new Fullscreen(this), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.listeners.container(), this.listeners.global(), this.config.ads.enabled && (this.ads = new Ads(this)), this.isHTML5 && this.config.autoplay && this.once(\"canplay\", ()=>silencePromise(this.play())), this.lastSeekTime = 0, this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))) : this.debug.error(\"Setup failed: no support\");\n    }\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n    get stopped() {\n        return Boolean(this.paused && 0 === this.currentTime);\n    }\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n    set currentTime(e) {\n        if (!this.duration) return;\n        const t = is.number(e) && e > 0;\n        this.media.currentTime = t ? Math.min(e, this.duration) : 0, this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n    get buffered() {\n        const { buffered: e } = this.media;\n        return is.number(e) ? e : e && e.length && this.duration > 0 ? e.end(0) / this.duration : 0;\n    }\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n    get duration() {\n        const e = parseFloat(this.config.duration), t = (this.media || {}).duration, i = is.number(t) && t !== 1 / 0 ? t : 0;\n        return e || i;\n    }\n    set volume(e) {\n        let t = e;\n        is.string(t) && (t = Number(t)), is.number(t) || (t = this.storage.get(\"volume\")), is.number(t) || ({ volume: t } = this.config), t > 1 && (t = 1), t < 0 && (t = 0), this.config.volume = t, this.media.volume = t, !is.empty(e) && this.muted && t > 0 && (this.muted = !1);\n    }\n    get volume() {\n        return Number(this.media.volume);\n    }\n    set muted(e) {\n        let t = e;\n        is.boolean(t) || (t = this.storage.get(\"muted\")), is.boolean(t) || (t = this.config.muted), this.config.muted = t, this.media.muted = t;\n    }\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n    get hasAudio() {\n        return !this.isHTML5 || !!this.isAudio || Boolean(this.media.mozHasAudio) || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n    set speed(e) {\n        let t = null;\n        is.number(e) && (t = e), is.number(t) || (t = this.storage.get(\"speed\")), is.number(t) || (t = this.config.speed.selected);\n        const { minimumSpeed: i, maximumSpeed: s } = this;\n        t = clamp(t, i, s), this.config.speed.selected = t, setTimeout(()=>{\n            this.media && (this.media.playbackRate = t);\n        }, 0);\n    }\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n    get minimumSpeed() {\n        return this.isYouTube ? Math.min(...this.options.speed) : this.isVimeo ? .5 : .0625;\n    }\n    get maximumSpeed() {\n        return this.isYouTube ? Math.max(...this.options.speed) : this.isVimeo ? 2 : 16;\n    }\n    set quality(e) {\n        const t = this.config.quality, i = this.options.quality;\n        if (!i.length) return;\n        let s = [\n            !is.empty(e) && Number(e),\n            this.storage.get(\"quality\"),\n            t.selected,\n            t.default\n        ].find(is.number), n = !0;\n        if (!i.includes(s)) {\n            const e = closest(i, s);\n            this.debug.warn(`Unsupported quality option: ${s}, using ${e} instead`), s = e, n = !1;\n        }\n        t.selected = s, this.media.quality = s, n && this.storage.set({\n            quality: s\n        });\n    }\n    get quality() {\n        return this.media.quality;\n    }\n    set loop(e) {\n        const t = is.boolean(e) ? e : this.config.loop.active;\n        this.config.loop.active = t, this.media.loop = t;\n    }\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n    set source(e) {\n        source.change.call(this, e);\n    }\n    get source() {\n        return this.media.currentSrc;\n    }\n    get download() {\n        const { download: e } = this.config.urls;\n        return is.url(e) ? e : this.source;\n    }\n    set download(e) {\n        is.url(e) && (this.config.urls.download = e, controls.setDownloadUrl.call(this));\n    }\n    set poster(e) {\n        this.isVideo ? ui.setPoster.call(this, e, !1).catch(()=>{}) : this.debug.warn(\"Poster can only be set for video\");\n    }\n    get poster() {\n        return this.isVideo ? this.media.getAttribute(\"poster\") || this.media.getAttribute(\"data-poster\") : null;\n    }\n    get ratio() {\n        if (!this.isVideo) return null;\n        const e = reduceAspectRatio(getAspectRatio.call(this));\n        return is.array(e) ? e.join(\":\") : e;\n    }\n    set ratio(e) {\n        this.isVideo ? is.string(e) && validateAspectRatio(e) ? (this.config.ratio = reduceAspectRatio(e), setAspectRatio.call(this)) : this.debug.error(`Invalid aspect ratio specified (${e})`) : this.debug.warn(\"Aspect ratio can only be set for video\");\n    }\n    set autoplay(e) {\n        this.config.autoplay = is.boolean(e) ? e : this.config.autoplay;\n    }\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n    toggleCaptions(e) {\n        captions.toggle.call(this, e, !1);\n    }\n    set currentTrack(e) {\n        captions.set.call(this, e, !1), captions.setup.call(this);\n    }\n    get currentTrack() {\n        const { toggled: e, currentTrack: t } = this.captions;\n        return e ? t : -1;\n    }\n    set language(e) {\n        captions.setLanguage.call(this, e, !1);\n    }\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n    set pip(e) {\n        if (!support.pip) return;\n        const t = is.boolean(e) ? e : !this.pip;\n        is.function(this.media.webkitSetPresentationMode) && this.media.webkitSetPresentationMode(t ? pip.active : pip.inactive), is.function(this.media.requestPictureInPicture) && (!this.pip && t ? this.media.requestPictureInPicture() : this.pip && !t && document.exitPictureInPicture());\n    }\n    get pip() {\n        return support.pip ? is.empty(this.media.webkitPresentationMode) ? this.media === document.pictureInPictureElement : this.media.webkitPresentationMode === pip.active : null;\n    }\n    setPreviewThumbnails(e) {\n        this.previewThumbnails && this.previewThumbnails.loaded && (this.previewThumbnails.destroy(), this.previewThumbnails = null), Object.assign(this.config.previewThumbnails, e), this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this));\n    }\n    static supported(e, t) {\n        return support.check(e, t);\n    }\n    static loadSprite(e, t) {\n        return loadSprite(e, t);\n    }\n    static setup(e, t = {}) {\n        let i = null;\n        return is.string(e) ? i = Array.from(document.querySelectorAll(e)) : is.nodeList(e) ? i = Array.from(e) : is.array(e) && (i = e.filter(is.element)), is.empty(i) ? null : i.map((e)=>new Plyr(e, t));\n    }\n}\nPlyr.defaults = cloneDeep(defaults);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/plyr/dist/plyr.min.mjs\n");

/***/ })

};
;